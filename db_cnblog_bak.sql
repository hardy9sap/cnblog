-- MySQL dump 10.13  Distrib 8.0.16, for Win64 (x86_64)
--
-- Host: localhost    Database: cnblog
-- ------------------------------------------------------
-- Server version	8.0.16

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
 SET NAMES utf8mb4 ;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `auth_group`
--

DROP TABLE IF EXISTS `auth_group`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
 SET character_set_client = utf8mb4 ;
CREATE TABLE `auth_group` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(150) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `name` (`name`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `auth_group`
--

LOCK TABLES `auth_group` WRITE;
/*!40000 ALTER TABLE `auth_group` DISABLE KEYS */;
/*!40000 ALTER TABLE `auth_group` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `auth_group_permissions`
--

DROP TABLE IF EXISTS `auth_group_permissions`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
 SET character_set_client = utf8mb4 ;
CREATE TABLE `auth_group_permissions` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `group_id` int(11) NOT NULL,
  `permission_id` int(11) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `auth_group_permissions_group_id_permission_id_0cd325b0_uniq` (`group_id`,`permission_id`),
  KEY `auth_group_permissio_permission_id_84c5c92e_fk_auth_perm` (`permission_id`),
  CONSTRAINT `auth_group_permissio_permission_id_84c5c92e_fk_auth_perm` FOREIGN KEY (`permission_id`) REFERENCES `auth_permission` (`id`),
  CONSTRAINT `auth_group_permissions_group_id_b120cbf9_fk_auth_group_id` FOREIGN KEY (`group_id`) REFERENCES `auth_group` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `auth_group_permissions`
--

LOCK TABLES `auth_group_permissions` WRITE;
/*!40000 ALTER TABLE `auth_group_permissions` DISABLE KEYS */;
/*!40000 ALTER TABLE `auth_group_permissions` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `auth_permission`
--

DROP TABLE IF EXISTS `auth_permission`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
 SET character_set_client = utf8mb4 ;
CREATE TABLE `auth_permission` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) NOT NULL,
  `content_type_id` int(11) NOT NULL,
  `codename` varchar(100) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `auth_permission_content_type_id_codename_01ab375a_uniq` (`content_type_id`,`codename`),
  CONSTRAINT `auth_permission_content_type_id_2f476e4b_fk_django_co` FOREIGN KEY (`content_type_id`) REFERENCES `django_content_type` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=53 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `auth_permission`
--

LOCK TABLES `auth_permission` WRITE;
/*!40000 ALTER TABLE `auth_permission` DISABLE KEYS */;
INSERT INTO `auth_permission` VALUES (1,'Can add log entry',1,'add_logentry'),(2,'Can change log entry',1,'change_logentry'),(3,'Can delete log entry',1,'delete_logentry'),(4,'Can view log entry',1,'view_logentry'),(5,'Can add permission',2,'add_permission'),(6,'Can change permission',2,'change_permission'),(7,'Can delete permission',2,'delete_permission'),(8,'Can view permission',2,'view_permission'),(9,'Can add group',3,'add_group'),(10,'Can change group',3,'change_group'),(11,'Can delete group',3,'delete_group'),(12,'Can view group',3,'view_group'),(13,'Can add content type',4,'add_contenttype'),(14,'Can change content type',4,'change_contenttype'),(15,'Can delete content type',4,'delete_contenttype'),(16,'Can view content type',4,'view_contenttype'),(17,'Can add session',5,'add_session'),(18,'Can change session',5,'change_session'),(19,'Can delete session',5,'delete_session'),(20,'Can view session',5,'view_session'),(21,'Can add user',6,'add_userinfo'),(22,'Can change user',6,'change_userinfo'),(23,'Can delete user',6,'delete_userinfo'),(24,'Can view user',6,'view_userinfo'),(25,'Can add article',7,'add_article'),(26,'Can change article',7,'change_article'),(27,'Can delete article',7,'delete_article'),(28,'Can view article',7,'view_article'),(29,'Can add blog',8,'add_blog'),(30,'Can change blog',8,'change_blog'),(31,'Can delete blog',8,'delete_blog'),(32,'Can view blog',8,'view_blog'),(33,'Can add tag',9,'add_tag'),(34,'Can change tag',9,'change_tag'),(35,'Can delete tag',9,'delete_tag'),(36,'Can view tag',9,'view_tag'),(37,'Can add comment',10,'add_comment'),(38,'Can change comment',10,'change_comment'),(39,'Can delete comment',10,'delete_comment'),(40,'Can view comment',10,'view_comment'),(41,'Can add category',11,'add_category'),(42,'Can change category',11,'change_category'),(43,'Can delete category',11,'delete_category'),(44,'Can view category',11,'view_category'),(45,'Can add article2 tag',12,'add_article2tag'),(46,'Can change article2 tag',12,'change_article2tag'),(47,'Can delete article2 tag',12,'delete_article2tag'),(48,'Can view article2 tag',12,'view_article2tag'),(49,'Can add article up down',13,'add_articleupdown'),(50,'Can change article up down',13,'change_articleupdown'),(51,'Can delete article up down',13,'delete_articleupdown'),(52,'Can view article up down',13,'view_articleupdown');
/*!40000 ALTER TABLE `auth_permission` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `blog_article`
--

DROP TABLE IF EXISTS `blog_article`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
 SET character_set_client = utf8mb4 ;
CREATE TABLE `blog_article` (
  `nid` int(11) NOT NULL AUTO_INCREMENT,
  `title` varchar(50) NOT NULL,
  `desc` varchar(255) NOT NULL,
  `create_time` datetime(6) NOT NULL,
  `content` longtext NOT NULL,
  `comment_count` int(11) NOT NULL,
  `up_count` int(11) NOT NULL,
  `down_count` int(11) NOT NULL,
  `category_id` int(11) DEFAULT NULL,
  `user_id` int(11) NOT NULL,
  PRIMARY KEY (`nid`),
  KEY `blog_article_category_id_7e38f15e_fk_blog_category_nid` (`category_id`),
  KEY `blog_article_user_id_5beb0cc1_fk_blog_userinfo_nid` (`user_id`),
  CONSTRAINT `blog_article_category_id_7e38f15e_fk_blog_category_nid` FOREIGN KEY (`category_id`) REFERENCES `blog_category` (`nid`),
  CONSTRAINT `blog_article_user_id_5beb0cc1_fk_blog_userinfo_nid` FOREIGN KEY (`user_id`) REFERENCES `blog_userinfo` (`nid`)
) ENGINE=InnoDB AUTO_INCREMENT=24 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `blog_article`
--

LOCK TABLES `blog_article` WRITE;
/*!40000 ALTER TABLE `blog_article` DISABLE KEYS */;
INSERT INTO `blog_article` VALUES (1,'Markdown温故知新(4)：更多扩展语法及HTML','\" 1、强调（删除 & 高亮） \" \" 2、脚注（注脚） \" \" 3、数学公式 \" \" 4、更多扩展语法 \" \" 5、终极扩展之内嵌 HTML \" \" 5.1、文本修饰类标签 \" \" 5.2、内容排版类标签 \" \" 5.3、图片及多媒体标签 \" \" 5.4、锚元素（A 标签） \" \" 6、总结 \" ...','2019-06-12 00:59:37.436878','暂无...',0,0,0,1,1),(2,'vue安装遇到的5个报错小结','前言 这篇博文不会教你怎么安装vue，但会告知安装过程中可能遇到的5个问题 2017年我写过一篇安装vue的博客，详情：https://www.cnblogs.com/tu-0718/p/7521099.html 5个报错 ①：若使用vue -V查询是否安装vue时提示没有找到指令，可能是你没有安装 ...','2019-06-12 01:00:48.347119','暂无...',0,0,0,2,3),(3,'js堆,栈与队列的区别','栈的定义 栈的常用操作 栈中有两个基本的操作 推入 ：从栈的顶端推入一个数据，依次往下推 弹出 ：讲栈顶端的数据移除 栈的基本提点就是 先进后厨，后入先进 除了头尾的节点，每个元素都有一个先驱和一个后继 对于栈的画面的理解，可以想象成一个步枪弹夹添加子弹和射击的过程 弹夹只有一个出入口进行推入和弹出 ...','2019-06-12 01:01:34.792069','暂无...',0,0,0,3,4),(4,'redis原理及集群主从配置','一、简介 存储系统背景 存储系统有三类： RDBMS oracle，dh2，postgresql，mysql，sql server NoSQL: KV NoSQL：redis,memcached 列式Column Family NoSQL: HBase，每一行每一字段可以保留n份，也是按照字段存储 ...','2019-06-12 13:41:45.353920','<div id=\"topics\">\r\n	<div class = \"post\">\r\n\r\n		<div class=\"clear\"></div>\r\n		<div class=\"postBody\">\r\n			<div id=\"cnblogs_post_body\" class=\"blogpost-body\"><h2>一、简介</h2>\r\n<h3>　　存储系统背景</h3>\r\n<p>　　　　存储系统有三类：<br />		　　　　RDBMS<br />			　　　　　　oracle，dh2，postgresql，mysql，sql server<br />		　　　　NoSQL:<br />			　　　　　　KV NoSQL：redis,memcached<br />			　　　　　　列式Column Family NoSQL: HBase，每一行每一字段可以保留n份，也是按照字段存储<br />		    　　　　　　文档Documentation NoSQL: MongoDB<br />			　　　　　　图式Graph NoSQL: Neo4j<br />			<br />		　　　　NewSQL<br />			　　　　　　aerospike，foundationDB，rethinkDB...</p>\r\n<h3>　　<strong>1、什么是redis</strong></h3>\r\n<p>　　　　redis是一个开源的使用ANSI C 语言编写、支持网络、可基于内存即可持久化的日志型，key-value数据库（是一个key-value存储系统），支持多种语言的API</p>\r\n<p>　　　　它是一个高级key-value数据库，跟memcached类似，但是redis的数据可以持久化，并且支持数据类型更丰富，同时还支持服务端的计算集合的并、交、和补集等，支持多种排序功能。　　</p>\r\n<p>　　　　　　</p>\r\n<h3>　　2、特点：			　　　　</h3>\r\n<p>　　　　常用来和memcache做比较，但redis是nosql，<span style=\"color: #ff0000;\">基于key-value（键值）的数据结构的存储</span>，可以存储键值，字典，图表<br />			　　　　完全工作在内存中，数据保存在内存，性能不错，数据周期性备份到硬盘，(持久化)的单线程服务器		<br />			　　　　可以通过lua脚本扩展<br />			　　　　<span style=\"color: #ff0000;\">支持sentinel主从架构高可用</span><br />			　　　　分布式		　</p>\r\n<p>　</p>\r\n<h3>　　3、性能</h3>\r\n<p>			　　　　虽然是单线程，kv是一个单纯简单的存储cpu通常不会形成瓶颈的，官方测试50个并发请求10w次，写的速度是110000次/s，读的速度是81000次/s，读写大小为256bytes的字符串；　</p>\r\n<p>&nbsp;</p>\r\n<h3>　　<strong>4、持久化persistence</strong></h3>\r\n<p>&nbsp;</p>\r\n<p>　　　　RDB: snapshot，二进制格式；按事先定制的策略，周期性地将数据保存至磁盘；数据文件默认为dump.rdb; <br />				　　　　　　客户端也可显式使用SAVA或BGSAVE命令启动快照保存机制；<br />					　　　　　　SAVE: 同步，在主线程中保存快照；此时会阻塞所有客户端请求；<br />					　　　　　　BGSAVE：异步，<br />			　　　　AOF：Append Only File<br />				　　　　　　记录每一次写操作至指定的文件尾部实现持久化；当redis重启时，可通过重新执行文件中的命令在内存重建数据库；<br />					　　　　　　BGREWRITEAOF：AOF文件重写；<br />						　　　　　　不会读取正在使用AOF文件，而通过将内存中的数据以命令的方式保存到临时文件中，完成之后替换原来的AOF文件；</p>\r\n<h3><em>　　</em>5、是一个数据结构服务器它支持的value类型有：</h3>\r\n<p>&nbsp;</p>\r\n<p>　　　　String字符串, List链表, Hash哈希, Set集合, Sorted Set有序集合, Bitmap, HyperLoglog</p>\r\n<p>　　　　</p>\r\n<p>　　　　Strings:<br />			　　　　　　SET key value [EX #] [NX|XX]<br />			　　　　　　GET<br />			　　　　　　INCR<br />			　　　　　　DECR<br />			　　　　　　EXIST</p>\r\n<p>		　　　　Lists:<br />			　　　　　　LPUSH<br />			　　　　　　RPUSH<br />			　　　　　　LPOP<br />			　　　　　　RPOP<br />			　　　　　　LINDEX<br />			　　　　　　LSET</p>\r\n<p>		　　　　Sets:<br />			　　　　　　SADD<br />			　　　　　　SINTER<br />			　　　　　　SUNION<br />			　　　　　　SPOP<br />			　　　　　　SISMEMBER</p>\r\n<p>		　　　　Sorted Sets:<br />			　　　　　　ZADD<br />			　　　　　　ZRANGE<br />			　　　　　　ZCARD<br />			　　　　　　ZRANK</p>\r\n<p>		　　　　Hashes:<br />			　　　　　　HSET<br />			　　　　　　HSETNX<br />			　　　　　　HGET<br />			　　　　　　HKEYS<br />			　　　　　　HVALS<br />			　　　　　　HDEL</p>\r\n<p>		　　　　Bitmaps, HyperLogLog</p>\r\n<p>&nbsp;</p>\r\n<h3>　　6、守护进程</h3>\r\n<p>　　　　监听端口为6379/tcp</p>\r\n<h3>　　7、数据库对比</h3>\r\n<p>&nbsp;</p>\r\n<p>　　　　常见数据库功能对比</p>\r\n<table style=\"height: 258px; width: 1059px;\" border=\"0\" align=\"left\">\r\n<tbody>\r\n<tr>\r\n<td>名称</td>\r\n<td>数据库类型</td>\r\n<td>数据存储选项</td>\r\n<td>操作类型</td>\r\n<td>备注</td>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n</tr>\r\n<tr>\r\n<td>redis</td>\r\n<td>内存存储，nosql数据库</td>\r\n<td>支持字符串、列表、集合、散列标、有序集合</td>\r\n<td>增、删、修改、更新</td>\r\n<td>支持分布式存储，主从同步及高可用，单线程</td>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n</tr>\r\n<tr>\r\n<td>memcached</td>\r\n<td>内存缓存数据库</td>\r\n<td>键值之间得映射</td>\r\n<td>增、删、修改、更新</td>\r\n<td>支持多线程</td>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n</tr>\r\n<tr>\r\n<td>mysql</td>\r\n<td>典型关系数据库，RDBMS</td>\r\n<td>数据库由多表组成，每张表包含多行</td>\r\n<td>增、删、修改、更新</td>\r\n<td>支持ACID性质</td>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n</tr>\r\n<tr>\r\n<td>postgresql</td>\r\n<td>典型关系数据库，RDBMS</td>\r\n<td>数据库由多表组成，每张表包含多行</td>\r\n<td>增、删、修改、更新</td>\r\n<td>支持ACID性质</td>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n</tr>\r\n<tr>\r\n<td>mongodb</td>\r\n<td>硬盘存储，nosql数据库</td>\r\n<td>数据库包含多个表</td>\r\n<td>增、删、修改、更新</td>\r\n<td>主从复制，分片，副本集、空间索引</td>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n</tr>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n</tbody>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n</table>\r\n<p>　　</p>\r\n<p>&nbsp;</p>\r\n<p>　</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<h3>　　</h3>\r\n<p>&nbsp;</p>\r\n<h3>　　8、简述和memcached之间的对比</h3>\r\n<p>　　　　redis不仅仅支持简单的kv类型数据，还支持list，set，hash等数据结构</p>\r\n<p>　　　　redis支持数据备份</p>\r\n<p>　　　　redis支持数据持久化，可以将内存中的数据保持在磁盘中，重启的时候可以在加载使用</p>\r\n<p>　　　　集群，memcache不支持集群，多台memcache 共处</p>\r\n<h3>　　9、redis的master/slave复制：</h3>\r\n<p>　　　　　　支持一个master多个slave</p>\r\n<p>　　　　　　slave可以介绍其他slave的链接来替代他链接master</p>\r\n<p>　　　　　　复制在master是非阻塞的，在slave是阻塞的</p>\r\n<p>　　　　　　复制被利用来提供扩展性，在slave端只提供查询功能及数据的冗余</p>\r\n<p>　　　　　</p>\r\n<h3>　　10、应用场景</h3>\r\n<p>　　　　缓存（数据查询，短连接、新闻内容、商品内容等）</p>\r\n<p>　　　　分布式集群架构中session分离</p>\r\n<p>　　　　聊天室在线好友列表</p>\r\n<p>　　　　任务队列（秒杀、抢购、12306）</p>\r\n<p>　　　　应用排行</p>\r\n<p>　　　　网站访问统计</p>\r\n<p>　　　　数据统计</p>\r\n<p>为了解决高并发、高可用、高可扩展，大数据存储等一系列问题而产生的数据库解决方案</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<h2>二、主从复制工作机制</h2>\r\n<p>&nbsp;　　redis持久化解决了redis服务重启后能够将硬盘的持久化数据恢复到内存中，但当redis服务器硬盘坏掉就会导致数据丢失，为了避免这种单点故障就有了主从复制工作机制</p>\r\n<p><img src=\"https://img2018.cnblogs.com/blog/1464965/201906/1464965-20190611190007908-1625781399.jpg\" alt=\"\" /></p>\r\n<p>　　一主多从结构</p>\r\n<p>　　主从复制不会阻塞master，在同步数据时，master可以继续处理client请求</p>\r\n<p>　　一个redis即可以是主也可以是从</p>\r\n<p>&nbsp;</p>\r\n<h2>三、多实例redis配置</h2>\r\n<h3>　　1、下载软件及安装源</h3>\r\n<p>　　　　http://download.redis.io/releases/redis-5.0.4.tar.gz</p>\r\n<p>　　　　如果源码安装下载源码</p>\r\n<p>　　　　如果yum安装请配置源</p>\r\n<p>　　　　　　<strong><em>rpm -ivh http://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm</em></strong></p>\r\n<h3>　　2、安装有两种安装方式</h3>\r\n<h3>　　　　1）、yum安装</h3>\r\n<p>　　　　　　直接yum install redis</p>\r\n<p>　　　　　　systemctl enable redis</p>\r\n<p>　　　　　　systemctl start redis</p>\r\n<p>&nbsp;</p>\r\n<div class=\"cnblogs_code\">\r\n<pre><span style=\"color: #000000;\">Dependencies Resolved    #一些依赖\r\n\r\n</span>====================================================================================================================<span style=\"color: #000000;\">\r\n Package                    Arch                     Version                           Repository              Size\r\n</span>====================================================================================================================<span style=\"color: #000000;\">\r\nInstalling:\r\n redis                      x86_64                   </span><span style=\"color: #800080;\">3.2</span>.<span style=\"color: #800080;\">12</span>-<span style=\"color: #800080;\">2</span>.el7                      epel                   <span style=\"color: #800080;\">544</span><span style=\"color: #000000;\"> k\r\nInstalling </span><span style=\"color: #0000ff;\">for</span><span style=\"color: #000000;\"> dependencies:\r\n jemalloc                   x86_64                   </span><span style=\"color: #800080;\">3.6</span>.<span style=\"color: #800080;\">0</span>-<span style=\"color: #800080;\">1</span>.el7                       epel                   <span style=\"color: #800080;\">105</span><span style=\"color: #000000;\"> k\r\n\r\nTransaction Summary\r\n</span>====================================================================================================================<span style=\"color: #000000;\">\r\nInstall  </span><span style=\"color: #800080;\">1</span> Package (+<span style=\"color: #800080;\">1</span> Dependent package)<br /><br /><br /><br /><br /></pre>\r\n</div>\r\n<div class=\"cnblogs_code\">\r\n<pre>Complete!<span style=\"color: #000000;\">\r\n[root@web1 </span>~<span style=\"color: #000000;\">]# systemctl start redis\r\n[root@web1 </span>~<span style=\"color: #000000;\">]# systemctl enable redis\r\nCreated symlink from </span>/etc/systemd/system/multi-user.target.wants/redis.service to /usr/lib/systemd/system/<span style=\"color: #000000;\">redis.service.\r\n\r\n[root@web1 </span>~]# netstat -<span style=\"color: #000000;\">untlp\r\nActive Internet connections (only servers)\r\nProto Recv</span>-Q Send-Q Local Address           Foreign Address         State       PID/<span style=\"color: #000000;\">Program name    \r\n<span style=\"color: #ff0000;\"><strong>tcp        </strong></span></span><span style=\"color: #ff0000;\"><strong>0      0 127.0.0.1:6379          0.0.0.0:*               LISTEN      2570/redis-server 1</strong></span><span style=\"color: #000000;\"> \r\ntcp        </span><span style=\"color: #800080;\">0</span>      <span style=\"color: #800080;\">0</span> <span style=\"color: #800080;\">0.0</span>.<span style=\"color: #800080;\">0.0</span>:<span style=\"color: #800080;\">111</span>             <span style=\"color: #800080;\">0.0</span>.<span style=\"color: #800080;\">0.0</span>:*               LISTEN      <span style=\"color: #800080;\">1</span>/<span style=\"color: #000000;\">systemd           \r\ntcp        </span><span style=\"color: #800080;\">0</span>      <span style=\"color: #800080;\">0</span> <span style=\"color: #800080;\">0.0</span>.<span style=\"color: #800080;\">0.0</span>:<span style=\"color: #800080;\">80</span>              <span style=\"color: #800080;\">0.0</span>.<span style=\"color: #800080;\">0.0</span>:*               LISTEN      <span style=\"color: #800080;\">2050</span>/<span style=\"color: #000000;\">nginx: master  \r\ntcp        </span><span style=\"color: #800080;\">0</span>      <span style=\"color: #800080;\">0</span> <span style=\"color: #800080;\">192.168</span>.<span style=\"color: #800080;\">122.1</span>:<span style=\"color: #800080;\">53</span>        <span style=\"color: #800080;\">0.0</span>.<span style=\"color: #800080;\">0.0</span>:*               LISTEN      <span style=\"color: #800080;\">2176</span>/<span style=\"color: #000000;\">dnsmasq        \r\ntcp        </span><span style=\"color: #800080;\">0</span>      <span style=\"color: #800080;\">0</span> <span style=\"color: #800080;\">0.0</span>.<span style=\"color: #800080;\">0.0</span>:<span style=\"color: #800080;\">22</span>              <span style=\"color: #800080;\">0.0</span>.<span style=\"color: #800080;\">0.0</span>:*               LISTEN      <span style=\"color: #800080;\">875</span>/<span style=\"color: #000000;\">sshd            \r\ntcp        </span><span style=\"color: #800080;\">0</span>      <span style=\"color: #800080;\">0</span> <span style=\"color: #800080;\">127.0</span>.<span style=\"color: #800080;\">0.1</span>:<span style=\"color: #800080;\">631</span>           <span style=\"color: #800080;\">0.0</span>.<span style=\"color: #800080;\">0.0</span>:*               LISTEN      <span style=\"color: #800080;\">879</span>/<span style=\"color: #000000;\">cupsd           \r\ntcp        </span><span style=\"color: #800080;\">0</span>      <span style=\"color: #800080;\">0</span> <span style=\"color: #800080;\">127.0</span>.<span style=\"color: #800080;\">0.1</span>:<span style=\"color: #800080;\">25</span>            <span style=\"color: #800080;\">0.0</span>.<span style=\"color: #800080;\">0.0</span>:*               LISTEN      <span style=\"color: #800080;\">2035</span>/<span style=\"color: #000000;\">master         \r\ntcp6       </span><span style=\"color: #800080;\">0</span>      <span style=\"color: #800080;\">0</span> :::<span style=\"color: #800080;\">111</span>                  :::*                    LISTEN      <span style=\"color: #800080;\">1</span>/<span style=\"color: #000000;\">systemd           \r\ntcp6       </span><span style=\"color: #800080;\">0</span>      <span style=\"color: #800080;\">0</span> :::<span style=\"color: #800080;\">80</span>                   :::*                    LISTEN      <span style=\"color: #800080;\">2050</span>/<span style=\"color: #000000;\">nginx: master  \r\ntcp6       </span><span style=\"color: #800080;\">0</span>      <span style=\"color: #800080;\">0</span> :::<span style=\"color: #800080;\">22</span>                   :::*                    LISTEN      <span style=\"color: #800080;\">875</span>/<span style=\"color: #000000;\">sshd            \r\ntcp6       </span><span style=\"color: #800080;\">0</span>      <span style=\"color: #800080;\">0</span> ::<span style=\"color: #800080;\">1</span>:<span style=\"color: #800080;\">631</span>                 :::*                    LISTEN      <span style=\"color: #800080;\">879</span>/<span style=\"color: #000000;\">cupsd           \r\ntcp6       </span><span style=\"color: #800080;\">0</span>      <span style=\"color: #800080;\">0</span> ::<span style=\"color: #800080;\">1</span>:<span style=\"color: #800080;\">25</span>                  :::*                    LISTEN      <span style=\"color: #800080;\">2035</span>/<span style=\"color: #000000;\">master         \r\nudp        </span><span style=\"color: #800080;\">0</span>      <span style=\"color: #800080;\">0</span> <span style=\"color: #800080;\">0.0</span>.<span style=\"color: #800080;\">0.0</span>:<span style=\"color: #800080;\">5353</span>            <span style=\"color: #800080;\">0.0</span>.<span style=\"color: #800080;\">0.0</span>:*                           <span style=\"color: #800080;\">574</span>/avahi-<span style=\"color: #000000;\">daemon: r \r\nudp        </span><span style=\"color: #800080;\">0</span>      <span style=\"color: #800080;\">0</span> <span style=\"color: #800080;\">127.0</span>.<span style=\"color: #800080;\">0.1</span>:<span style=\"color: #800080;\">323</span>           <span style=\"color: #800080;\">0.0</span>.<span style=\"color: #800080;\">0.0</span>:*                           <span style=\"color: #800080;\">2334</span>/<span style=\"color: #000000;\">chronyd        \r\nudp        </span><span style=\"color: #800080;\">0</span>      <span style=\"color: #800080;\">0</span> <span style=\"color: #800080;\">0.0</span>.<span style=\"color: #800080;\">0.0</span>:<span style=\"color: #800080;\">52822</span>           <span style=\"color: #800080;\">0.0</span>.<span style=\"color: #800080;\">0.0</span>:*                           <span style=\"color: #800080;\">574</span>/avahi-<span style=\"color: #000000;\">daemon: r \r\nudp        </span><span style=\"color: #800080;\">0</span>      <span style=\"color: #800080;\">0</span> <span style=\"color: #800080;\">192.168</span>.<span style=\"color: #800080;\">122.1</span>:<span style=\"color: #800080;\">53</span>        <span style=\"color: #800080;\">0.0</span>.<span style=\"color: #800080;\">0.0</span>:*                           <span style=\"color: #800080;\">2176</span>/<span style=\"color: #000000;\">dnsmasq        \r\nudp        </span><span style=\"color: #800080;\">0</span>      <span style=\"color: #800080;\">0</span> <span style=\"color: #800080;\">0.0</span>.<span style=\"color: #800080;\">0.0</span>:<span style=\"color: #800080;\">67</span>              <span style=\"color: #800080;\">0.0</span>.<span style=\"color: #800080;\">0.0</span>:*                           <span style=\"color: #800080;\">2176</span>/<span style=\"color: #000000;\">dnsmasq        \r\nudp        </span><span style=\"color: #800080;\">0</span>      <span style=\"color: #800080;\">0</span> <span style=\"color: #800080;\">0.0</span>.<span style=\"color: #800080;\">0.0</span>:<span style=\"color: #800080;\">177</span>             <span style=\"color: #800080;\">0.0</span>.<span style=\"color: #800080;\">0.0</span>:*                           <span style=\"color: #800080;\">890</span>/<span style=\"color: #000000;\">lightdm         \r\nudp6       </span><span style=\"color: #800080;\">0</span>      <span style=\"color: #800080;\">0</span> ::<span style=\"color: #800080;\">1</span>:<span style=\"color: #800080;\">323</span>                 :::*                                <span style=\"color: #800080;\">2334</span>/<span style=\"color: #000000;\">chronyd        \r\nudp6       </span><span style=\"color: #800080;\">0</span>      <span style=\"color: #800080;\">0</span> :::<span style=\"color: #800080;\">177</span>                  :::*                                <span style=\"color: #800080;\">890</span>/<span style=\"color: #000000;\">lightdm         \r\n[root@web1 </span>~]# </pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<h3>　　　　2）、编译安装</h3>\r\n<p>　　　　　　解压--&gt;编译--&gt;copy--&gt;启动</p>\r\n<p>　　　　　</p>\r\n<div class=\"cnblogs_code\">\r\n<pre><span style=\"color: #000000;\">　　　这次编译安装一个新版本\r\n\r\n　　　　　　</span><span style=\"color: #0000ff;\">mkdir</span> /<span style=\"color: #000000;\">data\r\n\r\n　　　　　　cd </span>/<span style=\"color: #000000;\">data\r\n\r\n　　　　　　#上传下载的包到此目录\r\n\r\n　　　　　　　　redis</span>-<span style=\"color: #800080;\">5.0</span>.<span style=\"color: #800080;\">4</span>.<span style=\"color: #0000ff;\">tar</span><span style=\"color: #000000;\">.gz\r\n\r\n　　　　　　</span><span style=\"color: #0000ff;\">tar</span> redis-<span style=\"color: #800080;\">5.0</span>.<span style=\"color: #800080;\">4</span>.<span style=\"color: #0000ff;\">tar</span><span style=\"color: #000000;\">.gz\r\n　　　　　　cd rredis</span>-<span style=\"color: #800080;\">5.0</span>.<span style=\"color: #800080;\">4</span>\r\n　　　　　　<span style=\"color: #0000ff;\">make</span> </pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<h3>　　3、编译安装及启动</h3>\r\n<h3>　　　　1）创建文件夹及拷贝关键文件</h3>\r\n<div class=\"cnblogs_code\">\r\n<pre>　    <span style=\"color: #0000ff;\">mkdir</span> /data/<span style=\"color: #000000;\">redis2\r\n\r\n　　　</span><span style=\"color: #0000ff;\">cp</span> redis.conf /data/<span style=\"color: #000000;\">redis2\r\n\r\n　　　</span><span style=\"color: #0000ff;\">cp</span> src/redis-server /data/<span style=\"color: #000000;\">redis2\r\n\r\n　　　cd </span>/data/redis2/       </pre>\r\n</div>\r\n<h3>　　　　2）编辑配置文件</h3>\r\n<p>　　　　　因为有#号开的行可以先过滤掉</p>\r\n<p>　　　　　　sed -ri \'/#|^$/d\' redis.conf</p>\r\n<p>　　　　　开始编辑配置文件，修改下面几项</p>\r\n<p>　　　　　&nbsp; vim redis.conf　　　</p>\r\n<div class=\"cnblogs_code\">\r\n<pre>port <span style=\"color: #800080;\">6380　　　　　　<span style=\"color: #ff0000;\">//监听端口</span><br />appendonly no&nbsp; yes <span style=\"color: #ff0000;\">//日志开关，不是包报错的日志，是二进制，记录数据变化</span><br /></span><span style=\"color: #000000;\">pidfile </span>/var/run/<span style=\"color: #000000;\">redis_6380.pid　　<span style=\"color: #ff0000;\">//pid名字</span>\r\nlogfile </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">/data/redis2/redis.log</span><span style=\"color: #800000;\">\" <span style=\"color: #ff0000;\">//log日志</span></span><span style=\"color: #000000;\">\r\ndaemonize yes  </span><span style=\"color: #ff0000;\">//后台启动　</span>　　<br />dbfilename dump.rbd　　<span style=\"color: #ff0000;\">//持久化数据文件　</span>　　　　</pre>\r\n</div>\r\n<h3>　　　　3）启动</h3>\r\n<p>　　　　　　<span style=\"color: #ff0000;\">标红的就是一个yum安装的实例，一个编译安装的实例，这个就是多实例了</span></p>\r\n<div class=\"cnblogs_code\">\r\n<pre>[root@web1 redis2]# ./redis-server ./<span style=\"color: #000000;\">redis.conf \r\n[root@web1 redis2]# netstat </span>-<span style=\"color: #000000;\">tunlp\r\nActive Internet connections (only servers)\r\nProto Recv</span>-Q Send-Q Local Address           Foreign Address         State       PID/<span style=\"color: #000000;\">Program name    \r\n<strong><span style=\"color: #ff0000;\">tcp        </span></strong></span><strong><span style=\"color: #ff0000;\">0      0 127.0.0.1:6379          0.0.0.0:*               LISTEN      2570/redis-server 1 \r\ntcp        0      0 192.168.216.51:6380     0.0.0.0:*               LISTEN      15434/./redis-</span></strong><span style=\"color: #000000;\"><strong><span style=\"color: #ff0000;\">serve</span> </strong>\r\ntcp        </span><span style=\"color: #800080;\">0</span>      <span style=\"color: #800080;\">0</span> <span style=\"color: #800080;\">0.0</span>.<span style=\"color: #800080;\">0.0</span>:<span style=\"color: #800080;\">111</span>             <span style=\"color: #800080;\">0.0</span>.<span style=\"color: #800080;\">0.0</span>:*               LISTEN      <span style=\"color: #800080;\">1</span>/<span style=\"color: #000000;\">systemd           \r\ntcp        </span><span style=\"color: #800080;\">0</span>      <span style=\"color: #800080;\">0</span> <span style=\"color: #800080;\">0.0</span>.<span style=\"color: #800080;\">0.0</span>:<span style=\"color: #800080;\">80</span>              <span style=\"color: #800080;\">0.0</span>.<span style=\"color: #800080;\">0.0</span>:*               LISTEN      <span style=\"color: #800080;\">2050</span>/<span style=\"color: #000000;\">nginx: master  \r\ntcp        </span><span style=\"color: #800080;\">0</span>      <span style=\"color: #800080;\">0</span> <span style=\"color: #800080;\">192.168</span>.<span style=\"color: #800080;\">122.1</span>:<span style=\"color: #800080;\">53</span>        <span style=\"color: #800080;\">0.0</span>.<span style=\"color: #800080;\">0.0</span>:*               LISTEN      <span style=\"color: #800080;\">2176</span>/<span style=\"color: #000000;\">dnsmasq        \r\ntcp        </span><span style=\"color: #800080;\">0</span>      <span style=\"color: #800080;\">0</span> <span style=\"color: #800080;\">0.0</span>.<span style=\"color: #800080;\">0.0</span>:<span style=\"color: #800080;\">22</span>              <span style=\"color: #800080;\">0.0</span>.<span style=\"color: #800080;\">0.0</span>:*               LISTEN      <span style=\"color: #800080;\">875</span>/<span style=\"color: #000000;\">sshd            \r\ntcp        </span><span style=\"color: #800080;\">0</span>      <span style=\"color: #800080;\">0</span> <span style=\"color: #800080;\">127.0</span>.<span style=\"color: #800080;\">0.1</span>:<span style=\"color: #800080;\">631</span>           <span style=\"color: #800080;\">0.0</span>.<span style=\"color: #800080;\">0.0</span>:*               LISTEN      <span style=\"color: #800080;\">879</span>/<span style=\"color: #000000;\">cupsd           \r\ntcp        </span><span style=\"color: #800080;\">0</span>      <span style=\"color: #800080;\">0</span> <span style=\"color: #800080;\">127.0</span>.<span style=\"color: #800080;\">0.1</span>:<span style=\"color: #800080;\">25</span>            <span style=\"color: #800080;\">0.0</span>.<span style=\"color: #800080;\">0.0</span>:*               LISTEN      <span style=\"color: #800080;\">2035</span>/<span style=\"color: #000000;\">master         \r\ntcp6       </span><span style=\"color: #800080;\">0</span>      <span style=\"color: #800080;\">0</span> :::<span style=\"color: #800080;\">111</span>                  :::*                    LISTEN      <span style=\"color: #800080;\">1</span>/<span style=\"color: #000000;\">systemd           \r\ntcp6       </span><span style=\"color: #800080;\">0</span>      <span style=\"color: #800080;\">0</span> :::<span style=\"color: #800080;\">80</span>                   :::*                    LISTEN      <span style=\"color: #800080;\">2050</span>/<span style=\"color: #000000;\">nginx: master  \r\ntcp6       </span><span style=\"color: #800080;\">0</span>      <span style=\"color: #800080;\">0</span> :::<span style=\"color: #800080;\">22</span>                   :::*                    LISTEN      <span style=\"color: #800080;\">875</span>/<span style=\"color: #000000;\">sshd            \r\ntcp6       </span><span style=\"color: #800080;\">0</span>      <span style=\"color: #800080;\">0</span> ::<span style=\"color: #800080;\">1</span>:<span style=\"color: #800080;\">631</span>                 :::*                    LISTEN      <span style=\"color: #800080;\">879</span>/<span style=\"color: #000000;\">cupsd           \r\ntcp6       </span><span style=\"color: #800080;\">0</span>      <span style=\"color: #800080;\">0</span> ::<span style=\"color: #800080;\">1</span>:<span style=\"color: #800080;\">25</span>                  :::*                    LISTEN      <span style=\"color: #800080;\">2035</span>/<span style=\"color: #000000;\">master         \r\nudp        </span><span style=\"color: #800080;\">0</span>      <span style=\"color: #800080;\">0</span> <span style=\"color: #800080;\">0.0</span>.<span style=\"color: #800080;\">0.0</span>:<span style=\"color: #800080;\">5353</span>            <span style=\"color: #800080;\">0.0</span>.<span style=\"color: #800080;\">0.0</span>:*                           <span style=\"color: #800080;\">574</span>/avahi-<span style=\"color: #000000;\">daemon: r \r\nudp        </span><span style=\"color: #800080;\">0</span>      <span style=\"color: #800080;\">0</span> <span style=\"color: #800080;\">127.0</span>.<span style=\"color: #800080;\">0.1</span>:<span style=\"color: #800080;\">323</span>           <span style=\"color: #800080;\">0.0</span>.<span style=\"color: #800080;\">0.0</span>:*                           <span style=\"color: #800080;\">2334</span>/<span style=\"color: #000000;\">chronyd        \r\nudp        </span><span style=\"color: #800080;\">0</span>      <span style=\"color: #800080;\">0</span> <span style=\"color: #800080;\">0.0</span>.<span style=\"color: #800080;\">0.0</span>:<span style=\"color: #800080;\">52822</span>           <span style=\"color: #800080;\">0.0</span>.<span style=\"color: #800080;\">0.0</span>:*                           <span style=\"color: #800080;\">574</span>/avahi-<span style=\"color: #000000;\">daemon: r \r\nudp        </span><span style=\"color: #800080;\">0</span>      <span style=\"color: #800080;\">0</span> <span style=\"color: #800080;\">192.168</span>.<span style=\"color: #800080;\">122.1</span>:<span style=\"color: #800080;\">53</span>        <span style=\"color: #800080;\">0.0</span>.<span style=\"color: #800080;\">0.0</span>:*                           <span style=\"color: #800080;\">2176</span>/<span style=\"color: #000000;\">dnsmasq        \r\nudp        </span><span style=\"color: #800080;\">0</span>      <span style=\"color: #800080;\">0</span> <span style=\"color: #800080;\">0.0</span>.<span style=\"color: #800080;\">0.0</span>:<span style=\"color: #800080;\">67</span>              <span style=\"color: #800080;\">0.0</span>.<span style=\"color: #800080;\">0.0</span>:*                           <span style=\"color: #800080;\">2176</span>/<span style=\"color: #000000;\">dnsmasq        \r\nudp        </span><span style=\"color: #800080;\">0</span>      <span style=\"color: #800080;\">0</span> <span style=\"color: #800080;\">0.0</span>.<span style=\"color: #800080;\">0.0</span>:<span style=\"color: #800080;\">177</span>             <span style=\"color: #800080;\">0.0</span>.<span style=\"color: #800080;\">0.0</span>:*                           <span style=\"color: #800080;\">890</span>/<span style=\"color: #000000;\">lightdm         \r\nudp6       </span><span style=\"color: #800080;\">0</span>      <span style=\"color: #800080;\">0</span> ::<span style=\"color: #800080;\">1</span>:<span style=\"color: #800080;\">323</span>                 :::*                                <span style=\"color: #800080;\">2334</span>/<span style=\"color: #000000;\">chronyd        \r\nudp6       </span><span style=\"color: #800080;\">0</span>      <span style=\"color: #800080;\">0</span> :::<span style=\"color: #800080;\">177</span>                  :::*                                <span style=\"color: #800080;\">890</span>/<span style=\"color: #000000;\">lightdm         \r\n[root@web1 redis2]# </span></pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<h3>　　　　4）变量，赋值取值，正常关闭，非正常的关闭</h3>\r\n<div class=\"cnblogs_code\">\r\n<pre>[root@web1 redis2]# redis-cli -h <span style=\"color: #800080;\">192.168</span>.<span style=\"color: #800080;\">216.51</span> -p <span style=\"color: #800080;\">6380</span> \r\n<span style=\"color: #800080;\">192.168</span>.<span style=\"color: #800080;\">216.51</span>:<span style=\"color: #800080;\">6380</span>&gt; \r\n<span style=\"color: #800080;\">192.168</span>.<span style=\"color: #800080;\">216.51</span>:<span style=\"color: #800080;\">6380</span>&gt; \r\n<span style=\"color: #800080;\">192.168</span>.<span style=\"color: #800080;\">216.51</span>:<span style=\"color: #800080;\">6380</span>&gt; \r\n<span style=\"color: #800080;\">192.168</span>.<span style=\"color: #800080;\">216.51</span>:<span style=\"color: #800080;\">6380</span>&gt;<span style=\"color: #000000;\"> set home zxg  <span style=\"color: #ff0000;\">//赋值</span>\r\nOK</span><span style=\"color: #800080;\">192.168</span>.<span style=\"color: #800080;\">216.51</span>:<span style=\"color: #800080;\">6380</span>&gt;<span style=\"color: #000000;\"> get home　　　　<span style=\"color: #ff0000;\">//取值\r\n</span></span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">zxg</span><span style=\"color: #800000;\">\"</span>\r\n<span style=\"color: #800080;\">192.168</span>.<span style=\"color: #800080;\">216.51</span>:<span style=\"color: #800080;\">6380</span>&gt; get abc <span style=\"color: #800080;\">123</span><span style=\"color: #000000;\">\r\n(error) ERR wrong number of arguments </span><span style=\"color: #0000ff;\">for</span> <span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">get</span><span style=\"color: #800000;\">\'</span><span style=\"color: #000000;\"> command\r\n</span><span style=\"color: #800080;\">192.168</span>.<span style=\"color: #800080;\">216.51</span>:<span style=\"color: #800080;\">6380</span>&gt; set abc <span style=\"color: #800080;\">123</span><span style=\"color: #000000;\"> \r\nOK\r\n</span><span style=\"color: #800080;\">192.168</span>.<span style=\"color: #800080;\">216.51</span>:<span style=\"color: #800080;\">6380</span>&gt;<span style=\"color: #000000;\"> get abc\r\n</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">123</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800080;\">192.168</span>.<span style=\"color: #800080;\">216.51</span>:<span style=\"color: #800080;\">6380</span>&gt; KEYS *　　　　<span style=\"color: #ff0000;\">//查看所有的key</span>\r\n<span style=\"color: #800080;\">1</span>) <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">abc</span><span style=\"color: #800000;\">\"</span>\r\n<span style=\"color: #800080;\">2</span>) <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">home</span><span style=\"color: #800000;\">\"</span>\r\n<span style=\"color: #800080;\">192.168</span>.<span style=\"color: #800080;\">216.51</span>:<span style=\"color: #800080;\">6380</span>&gt; <br />192.168.216.51:6380&gt; SHUTDOWN　　<span style=\"color: #ff0000;\">//正常关闭，非正常关闭就是kill了</span><br /><br /></pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>　　　</p>\r\n<p>　　　　</p>\r\n<h2>四、主从配置</h2>\r\n<h3>　　1、配置从服务器</h3>\r\n<p>　　　redis主从配置非常简单，只需要把从服务器改一个配置即可<em><br /></em></p>\r\n<p>　　　vim redis.conf</p>\r\n<p>&nbsp;</p>\r\n<div class=\"cnblogs_code\">\r\n<pre>slaveof <span style=\"color: #800080;\">192.168</span>.<span style=\"color: #800080;\">216.51</span> <span style=\"color: #800080;\">6379</span></pre>\r\n</div>\r\n<h3>　　2、启动服务</h3>\r\n<div class=\"cnblogs_code\">\r\n<pre>[root@web2 ~<span style=\"color: #000000;\">]# systemctl start redis\r\n[root@web2 </span>~]# systemctl enable redis</pre>\r\n</div>\r\n<h3>　　3、查看主从状态测试结果</h3>\r\n<div class=\"cnblogs_code\">\r\n<pre>[root@web1 redis2]# redis-cli -h <span style=\"color: #800080;\">192.168</span>.<span style=\"color: #800080;\">216.51</span> -p <span style=\"color: #800080;\">6379</span>\r\n<span style=\"color: #800080;\">192.168</span>.<span style=\"color: #800080;\">216.51</span>:<span style=\"color: #800080;\">6379</span>&gt;  <span style=\"color: #0000ff;\">info</span><span style=\"color: #000000;\"> replication \r\n# Replication\r\nrole:master\r\nconnected_slaves:</span><span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">\r\nslave0:ip</span>=<span style=\"color: #800080;\">192.168</span>.<span style=\"color: #800080;\">216.52</span>,port=<span style=\"color: #800080;\">6379</span>,state=online,offset=<span style=\"color: #800080;\">99</span>,lag=<span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">\r\nmaster_repl_offset:</span><span style=\"color: #800080;\">99</span><span style=\"color: #000000;\">\r\nrepl_backlog_active:</span><span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">\r\nrepl_backlog_size:</span><span style=\"color: #800080;\">1048576</span><span style=\"color: #000000;\">\r\nrepl_backlog_first_byte_offset:</span><span style=\"color: #800080;\">2</span><span style=\"color: #000000;\">\r\nrepl_backlog_histlen:</span><span style=\"color: #800080;\">98</span>\r\n<span style=\"color: #800080;\">192.168</span>.<span style=\"color: #800080;\">216.51</span>:<span style=\"color: #800080;\">6379</span>&gt; </pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<div class=\"cnblogs_code\">\r\n<p>127.0.0.1:6379&gt; info replication<br /># Replication<br />role:slave<br />master_host:192.168.216.51<br />master_port:6379<br />master_link_status:up<br />master_last_io_seconds_ago:3<br />master_sync_in_progress:0<br />slave_repl_offset:253<br />slave_priority:100<br />slave_read_only:1<br />connected_slaves:0<br />master_repl_offset:0<br />repl_backlog_active:0<br />repl_backlog_size:1048576<br />repl_backlog_first_byte_offset:0<br />repl_backlog_histlen:0<br />127.0.0.1:6379&gt; </p>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n</div>\r\n<p>注意1：从服务器只读</p>\r\n<p>　　　　</p>\r\n<p>　　　　master新建key test zxg</p>\r\n<div class=\"cnblogs_code\">\r\n<pre><span style=\"color: #800080;\">192.168</span>.<span style=\"color: #800080;\">216.51</span>:<span style=\"color: #800080;\">6379</span>&gt;<span style=\"color: #000000;\"> set test zxg\r\nOK\r\n</span><span style=\"color: #800080;\">192.168</span>.<span style=\"color: #800080;\">216.51</span>:<span style=\"color: #800080;\">6379</span>&gt;<span style=\"color: #000000;\"> get test\r\n</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">zxg</span><span style=\"color: #800000;\">\"</span>\r\n<span style=\"color: #800080;\">192.168</span>.<span style=\"color: #800080;\">216.51</span>:<span style=\"color: #800080;\">6379</span>&gt; </pre>\r\n</div>\r\n<p>　　　　slave查看有没有值</p>\r\n<div class=\"cnblogs_code\">\r\n<pre><span style=\"color: #800080;\">127.0</span>.<span style=\"color: #800080;\">0.1</span>:<span style=\"color: #800080;\">6379</span>&gt;<span style=\"color: #000000;\"> get test\r\n</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">zxg</span><span style=\"color: #800000;\">\"</span>\r\n<span style=\"color: #800080;\">127.0</span>.<span style=\"color: #800080;\">0.1</span>:<span style=\"color: #800080;\">6379</span>&gt; </pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<h3 id=\"auto_id_25\"><strong>转载请注明出处：</strong><a id=\"Editor_Edit_hlEntryLink\" title=\"view: redis原理及集群主从配置\" href=\"https://www.cnblogs.com/zhangxingeng/p/10743476.html\" target=\"_blank\">https://www.cnblogs.com/zhangxingeng/p/10743476.html</a>&nbsp;</h3>',1,2,0,4,9),(5,'一套简单的web即时通讯——第三版','前言 接上版，本次版本做了如下优化： 1、新增同意、拒绝添加好友后做线上提示； 2、新增好友分组，使用工具生成后台API，新增好友分组功能，主要功能有：添加分组、重命名分组名称、删除分组 3、新增好友管理，主要功能：删除好友（下个版本再实现功能）、移动好友至其他分组 4、添加好友时有验证信息、好友备 ...','2019-06-12 13:42:30.637670','<div id=\"topics\">\r\n	<div class = \"post\">\r\n\r\n		<div class=\"clear\"></div>\r\n		<div class=\"postBody\">\r\n			<div id=\"cnblogs_post_body\" class=\"blogpost-body\"><h2>　　前言</h2>\r\n<p>　　接上版，本次版本做了如下优化：</p>\r\n<p>　　1、新增同意、拒绝添加好友后做线上提示；</p>\r\n<p>　　2、新增好友分组，使用工具生成后台API，新增好友分组功能，主要功能有：添加分组、重命名分组名称、删除分组</p>\r\n<p>　　3、新增好友管理，主要功能：删除好友（下个版本再实现功能）、移动好友至其他分组</p>\r\n<p><em id=\"__mceDel\"><em id=\"__mceDel\">　　4、添加好友时有验证信息、好友备注、好友分组&nbsp;</em></em></p>\r\n<p><em id=\"__mceDel\"><em id=\"__mceDel\">　　</em></em><em id=\"__mceDel\"><em id=\"__mceDel\"><em id=\"__mceDel\"><em id=\"__mceDel\">5、AIP接口、WebSocket通道的前后端交互采用AES与RSA混合加密，防抓包监听，加、解密操作后并不影响业务，AIP接口、WebSocket通道的前后端交互正常</em></em></em></em></p>\r\n<p>&nbsp;</p>\r\n<h2>　　优化细节</h2>\r\n<p>　　1、新增同意、拒绝添加好友后做线上提示；</p>\r\n<p><img src=\"https://img2018.cnblogs.com/blog/1353055/201905/1353055-20190520113518625-850202992.gif\" alt=\"\" width=\"562\" height=\"295\" />&nbsp;&nbsp;<img src=\"https://img2018.cnblogs.com/blog/1353055/201905/1353055-20190520113553363-1174719048.gif\" alt=\"\" width=\"566\" height=\"297\" /></p>\r\n<p>　　2、新增好友分组，使用工具生成后台API，新增好友分组功能，主要功能有：添加分组、重命名分组名称、删除分组</p>\r\n<p><img src=\"https://img2018.cnblogs.com/blog/1353055/201905/1353055-20190521103924590-1196835162.png\" alt=\"\" />&nbsp;</p>\r\n<p>　　没有分组的默认在列表前面追加，分组名称后面展示对应好友数以及在线好友数量</p>\r\n<p><img src=\"https://img2018.cnblogs.com/blog/1353055/201906/1353055-20190611153736616-1068915033.png\" alt=\"\" width=\"269\" height=\"543\" /></p>\r\n<p>　　添加分组、重命名分组名称、删除分组</p>\r\n<p><img src=\"https://img2018.cnblogs.com/blog/1353055/201906/1353055-20190611153150723-413221463.gif\" alt=\"\" width=\"369\" height=\"591\" />&nbsp;<img src=\"https://img2018.cnblogs.com/blog/1353055/201906/1353055-20190611153201019-1244218451.gif\" alt=\"\" width=\"368\" height=\"591\" />&nbsp;<img src=\"https://img2018.cnblogs.com/blog/1353055/201906/1353055-20190611153213832-1445605747.gif\" alt=\"\" width=\"369\" height=\"591\" /></p>\r\n<p>&nbsp;</p>\r\n<p>　　3、新增好友管理，主要功能：删除好友（下个版本再实现功能）、移动好友至其他分组</p>\r\n<p>　　移动好友至其他分组</p>\r\n<p>&nbsp;&nbsp;<img src=\"https://img2018.cnblogs.com/blog/1353055/201906/1353055-20190611153350904-1599816870.gif\" alt=\"\" /></p>\r\n<p>　　4、添加好友时有验证信息、好友备注、好友分组&nbsp;</p>\r\n<p>&nbsp;　　先登录两个还不是好友的人，各种新增一个好友分组</p>\r\n<p><img src=\"https://img2018.cnblogs.com/blog/1353055/201906/1353055-20190611155430327-1404989797.png\" alt=\"\" />&nbsp;<img src=\"https://img2018.cnblogs.com/blog/1353055/201906/1353055-20190611155439291-967278205.png\" alt=\"\" /></p>\r\n<p>　　A向B发起好友申请</p>\r\n<p><img src=\"https://img2018.cnblogs.com/blog/1353055/201906/1353055-20190611160252931-1658219728.gif\" alt=\"\" /></p>\r\n<p>　　同意好友申请</p>\r\n<p><img src=\"https://img2018.cnblogs.com/blog/1353055/201906/1353055-20190611161316768-1507382508.gif\" alt=\"\" /></p>\r\n<p>&nbsp;　　拒绝好友申请</p>\r\n<p><img src=\"https://img2018.cnblogs.com/blog/1353055/201906/1353055-20190611161621067-605251191.gif\" alt=\"\" /></p>\r\n<p>　　5、AIP接口、WebSocket通道的前后端交互采用AES与RSA混合加密，防抓包监听，加、解密操作后并不影响业务，AIP接口、WebSocket通道的前后端交互正常</p>\r\n<p>　　API交互，关于前后端API安全交互，我前段时间实现了一套AES与RSA混合加密，详情请戳：<a id=\"post_title_link_10913636\" href=\"https://www.cnblogs.com/huanzi-qch/p/10913636.html\">前后端API交互数据加密&mdash;&mdash;AES与RSA混合加密完整实例</a></p>\r\n<p><img src=\"https://img2018.cnblogs.com/blog/1353055/201906/1353055-20190611162941982-991547798.gif\" alt=\"\" /></p>\r\n<p>　　WebSocket聊天，webSocket的加、解密与AIP的加、解密原理一样，发送前加密、收到数据后解密再交给业务处理，<span style=\"color: #ff0000;\">有个地方要注意的是，我们在进行消息转发时，要用的是接收方的前端公钥进行加密</span></p>\r\n<p><span style=\"color: #ff0000;\">　　<span style=\"color: #000000;\">建立WebSocket连接时，将当前用户的前端公钥发送到后端，后端进行Map保存（只贴出关键代码）</span></span></p>\r\n<div class=\"cnblogs_code\">\r\n<pre>    <span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">因为是url的方式传值，公钥中的/需要进行转换一下，传到后端再转回来（PS：因为生成的公钥里是不存在\",\"的，所以这里转成逗号）</span>\r\n    websocket = <span style=\"color: #0000ff;\">new</span> WebSocket(\"ws://localhost:10086/websocket/\" + userId + \"/\" + window.jsPublicKey.replace(/\\//g,\",\"));</pre>\r\n</div>\r\n<div class=\"cnblogs_code\">\r\n<pre><span style=\"color: #008000;\">/**</span><span style=\"color: #008000;\">\r\n * WebSocket服务\r\n </span><span style=\"color: #008000;\">*/</span><span style=\"color: #000000;\">\r\n@Component\r\n@ServerEndpoint(value </span>= \"/websocket/{userId}/{publicKey}\", configurator = MyEndpointConfigure.<span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\">)\r\n</span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> WebSocketServer {\r\n    </span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">省略其他代码  </span>\r\n\r\n    <span style=\"color: #008000;\">/**</span><span style=\"color: #008000;\">\r\n     * 登录用户的前端公钥Map集合（其实应该放在Redis）\r\n     </span><span style=\"color: #008000;\">*/</span>\r\n    <span style=\"color: #0000ff;\">private</span> <span style=\"color: #0000ff;\">static</span> Map&lt;Session, String&gt; loginPublicKeyList = <span style=\"color: #0000ff;\">new</span> HashMap&lt;Session, String&gt;<span style=\"color: #000000;\">();\r\n\r\n    </span><span style=\"color: #008000;\">/**</span><span style=\"color: #008000;\">\r\n     * 连接建立成功调用的方法\r\n     </span><span style=\"color: #008000;\">*/</span><span style=\"color: #000000;\">\r\n    @OnOpen\r\n    </span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">void</span> onOpen(Session session, @PathParam(\"userId\") String userId, @PathParam(\"publicKey\"<span style=\"color: #000000;\">) String publicKey) {\r\n        </span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">省略其他代码\r\n\r\n        </span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">设置前端公钥，因为是url的方式传值，公钥中的/需要进行转换一下，传到后端再转回来，然后将每个用户的前端公钥存储起来</span>\r\n        loginPublicKeyList.put(session,publicKey.replaceAll(\",\", \"/\"<span style=\"color: #000000;\">));\r\n\r\n    }</span><span style=\"color: #000000;\">\r\n}</span></pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>　　前端发送前加密</p>\r\n<div class=\"cnblogs_code\">\r\n<pre><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">发送消息</span>\r\n<span style=\"color: #0000ff;\">function</span><span style=\"color: #000000;\"> send(but) {\r\n    </span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">业务操作不变，省略代码</span>\r\n\r\n    <span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">先加密</span>\r\n    let aesKey =<span style=\"color: #000000;\"> aesUtil.genKey();\r\n    let data </span>=<span style=\"color: #000000;\"> {\r\n        data: aesUtil.encrypt(JSON.stringify({\r\n            </span>\"type\": \"1\"<span style=\"color: #000000;\">,\r\n            </span>\"toUser\": {\"userId\"<span style=\"color: #000000;\">: toUserId},\r\n            </span>\"fromUser\": {\"userId\"<span style=\"color: #000000;\">: fromUserId},\r\n            </span>\"message\"<span style=\"color: #000000;\">: message,\r\n            </span>\"date\"<span style=\"color: #000000;\">: nowTime\r\n        }), aesKey),</span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">AES加密后的数据</span>\r\n        aesKey: rsaUtil.encrypt(aesKey, sessionStorage.getItem(\'javaPublicKey\')),<span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">后端RSA公钥加密后的AES的key</span>\r\n        publicKey: window.jsPublicKey<span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">前端公钥</span>\r\n<span style=\"color: #000000;\">    };\r\n    websocket.send(JSON.stringify(data));\r\n\r\n    </span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">业务操作不变，省略代码</span>\r\n}    </pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>　　<span>后端收到后先解密</span></p>\r\n<div class=\"cnblogs_code\">\r\n<pre>    <span style=\"color: #008000;\">/**</span><span style=\"color: #008000;\">\r\n     * 服务器接收到客户端消息时调用的方法\r\n     </span><span style=\"color: #008000;\">*/</span><span style=\"color: #000000;\">\r\n    @OnMessage\r\n    </span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">void</span><span style=\"color: #000000;\"> onMessage(String message, Session session) {\r\n        </span><span style=\"color: #0000ff;\">try</span><span style=\"color: #000000;\"> {\r\n            </span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">jackson</span>\r\n            ObjectMapper mapper = <span style=\"color: #0000ff;\">new</span><span style=\"color: #000000;\"> ObjectMapper();\r\n            </span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">jackson 序列化和反序列化 date处理</span>\r\n            mapper.setDateFormat(<span style=\"color: #0000ff;\">new</span> SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\"<span style=\"color: #000000;\">));\r\n            mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, </span><span style=\"color: #0000ff;\">false</span><span style=\"color: #000000;\">);\r\n            </span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">JSON字符串转 HashMap</span>\r\n            HashMap map = mapper.readValue(message, HashMap.<span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\">);\r\n\r\n            </span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">先解密</span>\r\n            String data = (String) map.get(\"data\"<span style=\"color: #000000;\">);\r\n            String aesKey </span>= (String) map.get(\"aesKey\"<span style=\"color: #000000;\">);\r\n\r\n            </span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">后端私钥解密的到AES的key</span>\r\n            <span style=\"color: #0000ff;\">byte</span>[] plaintext =<span style=\"color: #000000;\"> RsaUtil.decryptByPrivateKey(Base64.decodeBase64(aesKey), RsaUtil.getPrivateKey());\r\n            aesKey </span>= <span style=\"color: #0000ff;\">new</span><span style=\"color: #000000;\"> String(plaintext);\r\n\r\n            </span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">RSA解密出来字符串多一对双引号</span>\r\n            aesKey = aesKey.substring(1, aesKey.length() - 1<span style=\"color: #000000;\">);\r\n\r\n            </span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">AES解密得到明文data数据</span>\r\n            String decrypt =<span style=\"color: #000000;\"> AesUtil.decrypt(data, aesKey);\r\n\r\n            </span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">JSON字符串转 HashMap</span>\r\n            HashMap hashMap = mapper.readValue(decrypt, HashMap.<span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\">);\r\n\r\n            </span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">得到hashMap，下面的业务操作跟前面的一样，这里就不贴出来了</span>\r\n<span style=\"color: #000000;\">\r\n        } </span><span style=\"color: #0000ff;\">catch</span><span style=\"color: #000000;\"> (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }</span></pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>　　后端发送之前先加密，<span style=\"color: #ff0000;\">这里要用消息接收方的前端公钥进行加密</span></p>\r\n<div class=\"cnblogs_code\">\r\n<pre>    <span style=\"color: #008000;\">/**</span><span style=\"color: #008000;\">\r\n     * 封装一个send方法，发送消息到前端\r\n     </span><span style=\"color: #008000;\">*/</span>\r\n    <span style=\"color: #0000ff;\">private</span> <span style=\"color: #0000ff;\">void</span><span style=\"color: #000000;\"> send(Session session, String message) {\r\n        </span><span style=\"color: #0000ff;\">try</span><span style=\"color: #000000;\"> {\r\n            </span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">发送前加密\r\n            </span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">每次响应之前随机获取AES的key，加密data数据</span>\r\n            String key =<span style=\"color: #000000;\"> AesUtil.getKey();\r\n            String data </span>=<span style=\"color: #000000;\"> AesUtil.encrypt(message, key);\r\n            </span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">用前端的公钥来解密AES的key，并转成Base64，注意：这里需要用接收方的前端公钥进行加密，从loginPublicKeyList集合获取</span>\r\n            String aesKey =<span style=\"color: #000000;\"> Base64.encodeBase64String(RsaUtil.encryptByPublicKey(key.getBytes(), loginPublicKeyList.get(session)));\r\n            </span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">发送过去的是AES加密后的data，跟RSA加密后的aesKey</span>\r\n            session.getBasicRemote().sendText(\"{\\\"data\\\":\\\"\" + data + \"\\\",\\\"aesKey\\\":\\\"\" + aesKey + \"\\\"}\"<span style=\"color: #000000;\">);\r\n        } </span><span style=\"color: #0000ff;\">catch</span><span style=\"color: #000000;\"> (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }</span></pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;　　前端收到消息后先解密</p>\r\n<div class=\"cnblogs_code\">\r\n<pre><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">接收到消息的回调方法</span>\r\nwebsocket.onmessage = <span style=\"color: #0000ff;\">function</span><span style=\"color: #000000;\"> (event) {\r\n    let data </span>= eval(\"(\" + event.data + \")\"<span style=\"color: #000000;\">);\r\n    </span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">先解密</span>\r\n    let msgObj =<span style=\"color: #000000;\"> aesUtil.decrypt(data.data, rsaUtil.decrypt(data.aesKey, window.jsPrivateKey));\r\n    \r\n    </span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">业务操作不变，省略代码</span>\r\n<span style=\"color: #000000;\">\r\n};</span></pre>\r\n</div>\r\n<p>　　上线在线系统通知没有问题</p>\r\n<p><img src=\"https://img2018.cnblogs.com/blog/1353055/201906/1353055-20190612105251664-913919133.gif\" alt=\"\" /></p>\r\n<p>　　聊天没有问题</p>\r\n<p><img src=\"https://img2018.cnblogs.com/blog/1353055/201906/1353055-20190612105634788-1647222980.gif\" alt=\"\" /></p>\r\n<h2>　　后记</h2>\r\n<p>　　第三版先到这里，后面我在整理一下WebSocket的AES与RSA混合加密，单独写一篇博客</p></div><div id=\"MySignature\"></div>',0,0,0,5,9),(6,'Docker 入门及安装[Docker 系列-1]','docker 如日中天，这不是单纯的炒概念，docker 确确实实解决了开发与运维的痛点，因此在企业开发中得到了非常广泛的使用，本文对于 docker 的这些基本知识点再做一些简单回顾。 <! more 什么是 docker 根据 wikipedia 中的介绍： Docker 是一个开放源代码软件项 ...','2019-06-12 13:43:37.957109','<div id=\"main\">\r\n	<div id=\"mainContent\">\r\n	<div class=\"forFlow\">\r\n		\r\n        <div id=\"post_detail\">\r\n<!--done-->\r\n<div id=\"topics\">\r\n	<div class = \"post\">\r\n		<div class=\"clear\"></div>\r\n		<div class=\"postBody\">\r\n			<div id=\"cnblogs_post_body\" class=\"blogpost-body cnblogs-markdown\"><p>docker 如日中天，这不是单纯的炒概念，docker 确确实实解决了开发与运维的痛点，因此在企业开发中得到了非常广泛的使用，本文对于 docker 的这些基本知识点再做一些简单回顾。</p>\r\n<!--more-->\r\n<h2 id=\"什么是-docker\">什么是 docker</h2>\r\n<p>根据 wikipedia 中的介绍：</p>\r\n<blockquote>\r\n<p>Docker 是一个开放源代码软件项目，让应用程序布署在软件容器下的工作可以自动化进行，借此在 Linux 操作系统上，提供一个额外的软件抽象层，以及操作系统层虚拟化的自动管理机制。<br />\r\nDocker 利用 Linux 核心中的资源分脱机制，例如 cgroups ，以及 Linux 核心名字空间（name space），来创建独立的软件容器（containers）。这可以在单一 Linux 实体下运作，避免启动一个虚拟机造成的额外负担。Linux 核心对名字空间的支持完全隔离了工作环境中应用程序的视野，包括进程树、网络、用户 ID 与挂载文件系统，而核心的 cgroup 提供资源隔离，包括 CPU 、存储器、block I/O 与网络。从 0.9 版本起，Dockers 在使用抽象虚拟是经由 libvirt 的 LXC 与 systemd - nspawn 提供界面的基础上，开始包括 libcontainer 库做为以自己的方式开始直接使用由 Linux 核心提供的虚拟化的设施。<br />\r\n依据行业分析公司“451研究”：“Dockers 是有能力打包应用程序及其虚拟容器，可以在任何 Linux 服务器上运行的依赖性工具，这有助于实现灵活性和便携性，应用程序在任何地方都可以运行，无论是公有云、私有云、单机等。” 。</p>\r\n</blockquote>\r\n<p>这里的介绍有点绕口，让我来介绍下 docker 解决了哪些痛点：</p>\r\n<ol>\r\n<li><p>简化环境管理</p>\r\n<p>传统的软件开发与发布环境复杂，配置繁琐，经常有读者在微信上问：我的代码开发环境可以运行，一旦部署到服务器上就运行不了了。这个问题很常见，也确实很烦人，但是问题总要解决，开发环境、测试环境、生产环境，每个环节都有可能出现这样那样的问题，如果能够在各个环境中实现一键部署，就会方便很多，例如一键安装 linux 、一键安装 mysql、一键安装 nginx 等，docker 彻底解决了这个问题。</p></li>\r\n<li><p>虚拟化更加轻量级</p>\r\n<p>说到容器，说到虚拟化，很多人总会想到虚拟机，想到 VMware、VirtualBox 等工具，不同于这些虚拟技术，docker 虚拟化更加轻量级，传统的虚拟机都是先虚拟出一个操作系统，然后在操作系统上完成各种各样的配置，这样并不能充分的利用物理机的性能，docker 则是一种操作系统级别的虚拟技术，它运行在操作系统之上的用户空间，所有的容器都共用一个系统内核甚至公共库，容器引擎提供了进程级别的隔离，让每个容器都像运行在单独的系统之上，但是又能够共享很多底层资源。因此 docker 更为轻量、快速和易于管理。</p></li>\r\n<li><p>程序可移植</p>\r\n<p>有了前面介绍的两个特点，程序可移植就是顺理成章的事情了。</p></li>\r\n</ol>\r\n<h2 id=\"docker-和虚拟机\">docker 和虚拟机</h2>\r\n<p>前面介绍了 docker 与传统虚拟机的差异，通过下表再来详细了解下这种差异：</p>\r\n<table>\r\n<thead>\r\n<tr class=\"header\">\r\n<th style=\"text-align: left;\"></th>\r\n<th style=\"text-align: left;\">docker</th>\r\n<th style=\"text-align: left;\">虚拟机</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: left;\">相同点</td>\r\n<td style=\"text-align: left;\">1. 都可在不同的主机之间迁移<br/>2. 都具备 root 权限<br/>3. 都可以远程控制<br/>4. 都有备份、回滚操作<br/></td>\r\n<td style=\"text-align: left;\"></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: left;\">操作系统</td>\r\n<td style=\"text-align: left;\">在性能上有优势，可以轻易的运行多个操作系统</td>\r\n<td style=\"text-align: left;\">可以安装任何系统，但是性能不及容器</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: left;\">原理</td>\r\n<td style=\"text-align: left;\">和宿主机共享内核，所有容器运行在容器引擎之上，容器并非一个完整的操作系统，所有容器共享操作系统，在进程级进行隔离</td>\r\n<td style=\"text-align: left;\">每一个虚拟机都建立在虚拟的硬件之上，提供指令级的虚拟，具备一个完整的操作系统</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: left;\">优点</td>\r\n<td style=\"text-align: left;\">高效、集中。一个硬件节点可以运行数以百计的的容器，非常节省资源，QoS 会尽量满足，但不保证一定满足。内核由提供者升级，服务由服务提供者管理</td>\r\n<td style=\"text-align: left;\">对操作系统具有绝对权限，对系统版本和系统升级具有完全的管理权限。具有一整套的的资源：CPU、RAM 和磁盘。QoS 是有保证的，每一个虚拟机就像一个真实的物理机一样，可以实现不同的操作系统运行在同一物理节点上。</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: left;\">资源管理</td>\r\n<td style=\"text-align: left;\">弹性资源分配：资源可以在没有关闭容器的情况下添加，数据卷也无需重新分配大小</td>\r\n<td style=\"text-align: left;\">虚拟机需要重启，虚拟机里边的操作系统需要处理新加入的资源，如磁盘等，都需要重新分区。</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: left;\">远程管理</td>\r\n<td style=\"text-align: left;\">根据操作系统的不同，可以通过 shell 或者远程桌面进行</td>\r\n<td style=\"text-align: left;\">远程控制由虚拟化平台提供，可以在虚拟机启动之前连接</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: left;\">缺点</td>\r\n<td style=\"text-align: left;\">对内核没有控制权限，只有容器的提供者具备升级权限。只有一个内核运行在物理节点上，几乎不能实现不同的操作系统混合。容器提供者一般仅提供少数的几个操作系统</td>\r\n<td style=\"text-align: left;\">每一台虚拟机都具有更大的负载，耗费更多的资源，用户需要全权维护和管理。一台物理机上能够运行的虚拟机非常有限</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: left;\">配置</td>\r\n<td style=\"text-align: left;\">快速，基本上是一键配置</td>\r\n<td style=\"text-align: left;\">配置时间长</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: left;\">启动时间</td>\r\n<td style=\"text-align: left;\">秒级</td>\r\n<td style=\"text-align: left;\">分钟级</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: left;\">硬盘使用</td>\r\n<td style=\"text-align: left;\">MB</td>\r\n<td style=\"text-align: left;\">GB</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: left;\">性能</td>\r\n<td style=\"text-align: left;\">接近原生态</td>\r\n<td style=\"text-align: left;\">弱于原生态</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: left;\">系统支持数量</td>\r\n<td style=\"text-align: left;\">单机支持上千个</td>\r\n<td style=\"text-align: left;\">一般不多于几十个</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<h2 id=\"docker-与传统容器\">docker 与传统容器</h2>\r\n<p>不同与传统容器，docker 早起基于 LXC，后来基于自研的 libContainer，docker 对于传统容器做了许多优化，如下：</p>\r\n<ol>\r\n<li>跨平台的可移植性</li>\r\n<li>面向应用</li>\r\n<li>版本控制</li>\r\n<li>组件复用</li>\r\n<li>共享性</li>\r\n<li>工具生态系统</li>\r\n</ol>\r\n<h2 id=\"docker-应用场景\">docker 应用场景</h2>\r\n<ol>\r\n<li>加速本地开发</li>\r\n<li>自动打包和部署应用</li>\r\n<li>创建轻量、私有的PaaS环境</li>\r\n<li>自动化测试和持续集成/部署</li>\r\n<li>部署并扩展Web应用、数据库和后端服务器</li>\r\n<li>创建安全沙盒</li>\r\n<li>轻量级的桌面虚拟化</li>\r\n</ol>\r\n<h2 id=\"docker-核心组件\">docker 核心组件</h2>\r\n<p>docker 中有三大核心组件：</p>\r\n<ul>\r\n<li>镜像</li>\r\n</ul>\r\n<p>镜像是一个只读的静态模版，它保存了容器需要的环境和应用的执行代码，可以将镜像看成是容器的代码，当代码运行起来之后，就成了容器，镜像和容器的关系也类似于程序和进程的关系。</p>\r\n<ul>\r\n<li>容器</li>\r\n</ul>\r\n<p>容器是一个运行时环境，是镜像的一个运行状态，它是镜像执行的动态表现。</p>\r\n<ul>\r\n<li>库</li>\r\n</ul>\r\n<p>库是一个特定的用户存储镜像的目录，一个用户可以建立多个库来保存自己的镜像。</p>\r\n<h2 id=\"docker相关技术\">docker相关技术</h2>\r\n<ol>\r\n<li>隔离性</li>\r\n<li>可度量性</li>\r\n<li>移植性</li>\r\n<li>安全性</li>\r\n</ol>\r\n<h2 id=\"docker-安装\">docker 安装</h2>\r\n<p>相对而言，Linux 上安装 Docker 是最容易的，其次是 Mac ，最后是 Windows ，Windows 因此要装的东西比较多，官方也提供了两个不同的安装包，支持不同的 Windows 的不同版本，一个是针对 Win10 的安装引导程序，还有一个是兼容性较好的 Toolbox ，但是在 Windows 上运行 Docker ，后期在虚拟目录等方面还会遇到各种问题，所以这里松哥是非常不建议大家在 Windows 中安装 Docker ，有 Mac 的上 Mac （Mac 上安装 Docker 就像安装普通软件一样），没有 Mac 的装 Linux 虚拟机，再装 Docker 即可，这里我就先以 CentOS 上安装 Docker 为例，来说说 Docker 安装。</p>\r\n<p>分别执行如下安装命令：</p>\r\n<pre><code># 首先安装 Docker\r\nyum -y install docker\r\n\r\n# 然后启动 Docker 服务\r\nservice docker start\r\n\r\n# 测试安装是否成功\r\ndocker -v</code></pre>\r\n<p>安装完成后，看到如下页面，表示安装成功：</p>\r\n<p><img src=\"http://www.javaboy.org/images/docker/docker-1-1.png\" /></p>\r\n<h2 id=\"总结\">总结</h2>\r\n<p>本文主要向大家介绍了 Docker 的基本概念以及 Docker 的安装 ，下篇文章我们向大家介绍 Docker 中基本的容器操作。有问题欢迎留言讨论。</p>\r\n<p>参考资料：</p>\r\n<p>[1] 曾金龙，肖新华，刘清.Docker开发实践[M].北京：人民邮电出版社，2015.</p>',0,0,0,6,9),(7,'1. 路过面了个试就拿到2个offer。是运气吗？','路过随便面个试就拿到2个offer。是运气吗？ #复习很重要#看看面试问的问题，再瞧瞧师兄的学习态度，你就明白 机会为何总与你擦肩而过了。[玫瑰] 以下是我和师兄的聊天记录，你会几个？','2019-06-13 12:27:48.794310','<!--done-->\r\n<div id=\"topics\">\r\n	<div class = \"post\">\r\n\r\n		<div class=\"clear\"></div>\r\n		<div class=\"postBody\">\r\n			<div id=\"cnblogs_post_body\" class=\"blogpost-body\"><p>路过随便面个试就拿到2个offer。是运气吗？</p>\r\n<p>#复习很重要#<br />看看面试问的问题，再瞧瞧师兄的学习态度，你就明白 机会为何总与你擦肩而过了。[玫瑰]</p>\r\n<p>&nbsp;</p>\r\n<p>以下是我和师兄的聊天记录，你会几个？</p>\r\n<p>&nbsp;</p>\r\n<p><img src=\"https://img2018.cnblogs.com/blog/425762/201812/425762-20181204114738741-975815461.png\" alt=\"\" width=\"537\" height=\"341\" /></p>\r\n<p><img src=\"https://img2018.cnblogs.com/blog/425762/201812/425762-20181204114803731-126545164.png\" alt=\"\" width=\"547\" height=\"322\" /></p>\r\n<p><img src=\"https://img2018.cnblogs.com/blog/425762/201812/425762-20181204114825389-1665943659.png\" alt=\"\" width=\"563\" height=\"346\" /></p>',0,0,0,7,9),(11,'水浒传','\n123\n\n\nsadfsa\n\n\nf\n\n\ndsf\n\n\nds\n\n\nf\n\n\nsd\n\n\nf\n\n\nsd\n\n\nfsd\n\n\nf\n\n\n\n\n\n...','2019-06-15 21:29:22.494930','<p>\n<strong><em><u>123</u></em></strong>\n</p>\n<p>\n<strong><em><u>sadfsa</u></em></strong>\n</p>\n<p>\n<strong><em><u>f</u></em></strong>\n</p>\n<p>\n<strong><em><u>dsf</u></em></strong>\n</p>\n<p>\n<strong><em><u>ds</u></em></strong>\n</p>\n<p>\n<strong><em><u>f</u></em></strong>\n</p>\n<p>\n<strong><em><u>sd</u></em></strong>\n</p>\n<p>\n<strong><em><u>f</u></em></strong>\n</p>\n<p>\n<strong><em><u>sd</u></em></strong>\n</p>\n<p>\n<strong><em><u>fsd</u></em></strong>\n</p>\n<p>\n<strong><em><u>f</u></em></strong>\n</p>\n<p>\n<strong><em><u><br/>\n</u></em></strong>\n</p>\n',0,0,0,NULL,9),(12,'Python中的代码缓存机制','\r\n	目录：\r\n\n\r\n	1) 什么是代码块\r\n\n\r\n	2) 基本原理\r\n\n\r\n	3) 机制适用范围\r\n\n\r\n	4) 适用对象\r\n\n\r\n	5) 优势\r\n\n\r\n	 \r\n\n\r\n	 \r\n\n\r\n	更详细说明，参考太白老师博客\r\n\n\n https://www.cnblogs.com/jin-xin/articl...','2019-06-16 10:20:39.980420','<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	目录：\r\n</p>\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	1) 什么是代码块\r\n</p>\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	2) 基本原理\r\n</p>\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	3) 机制适用范围\r\n</p>\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	4) 适用对象\r\n</p>\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	5) 优势\r\n</p>\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	 \r\n</p>\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	 \r\n</p>\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	更详细说明，参考太白老师博客\r\n</p>\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\n<a href=\"https://www.cnblogs.com/jin-xin/articles/9439483.html\" target=\"_blank\"> https://www.cnblogs.com/jin-xin/articles/9439483.html</a>\n</p>\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	1. 什么是代码块？\r\n</p>\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	    Python程序由代码块构成，代码块是Python执行的单位；<br/>\r\n    一个模块、一个函数、一个类、一个py文件等都是代码块；<br/>\r\n   PS：\r\n</p>\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	         交互式IDE每一行都是一个代码块\r\n</p>\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	2. 基本原理\r\n</p>\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	    在同一代码块内，当遇到初始化对象的时候，将变量和值存放到一个字典中；<br/>\r\n    当又遇到初始化对象时，它不急着创建，而是到字典中查询这个对象是否存在。<br/>\r\n    如果存在，直接重用，无需创建；如果没有，则创建对象并且加入到字典中。\r\n</p>\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	 \r\n</p>\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	3. 机制适用范围\r\n</p>\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	    同一代码块\r\n</p>\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	 \r\n</p>\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	4. 适用对象\r\n</p>\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	    int(float)  ---&gt; 所有\r\n</p>\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	    bool\r\n</p>\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	    str ---&gt; 所有；\r\n</p>\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\n<em id=\"__mceDel\">               只是当乘数 &gt;= 2时，仅包含字母、数字、下划线并且长度&lt;=20的字符串才被缓存</em>\n</p>\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\n<em>5. 优势</em>\n</p>\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\n<em>  优点：能够提高一些字符串，整数处理人物在时间和空间上的性能；</em>\n</p>\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\n<em>           需要值相同的字符串，整数的时候，直接从‘字典’中取出复用，避免频繁的创建和销毁，提升效率，节约内存。</em>\n</p>\n<br/>',0,0,0,NULL,16),(13,'大王警语--be_a_new_gentleman','大王博客：https://www.cnblogs.com/alex3714/ # 表面层次# 1，着装特体（服饰的牌子中高端）# 2，每天洗澡# 3，适当用香水# 4，女士优先# 5，不随地吐痰、不乱扔垃圾、不在人群中抽烟# 6，不大声喧哗、不插队、碰到别人要说抱歉# 7...','2019-06-16 10:22:23.967379','<pre>大王博客：<a href=\"https://www.cnblogs.com/alex3714/\" target=\"_blank\">https://www.cnblogs.com/alex3714/</a> # 表面层次\r\n# 1，着装特体（服饰的牌子中高端）\r\n# 2，每天洗澡\r\n# 3，适当用香水\r\n# 4，女士优先\r\n# 5，不随地吐痰、不乱扔垃圾、不在人群中抽烟\r\n# 6，不大声喧哗、不插队、碰到别人要说抱歉\r\n# 7，不在地铁上吃东西（尤其是味重的）\r\n# 8，不在教室里吃东西\r\n# 9，不随便评价别人\r\n# 10，尊重别人的职业和劳动\r\n# 11，尊重别人的隐私\r\n# 12，不随便打听别人的薪资\r\n# 13，与人保持安全距离（1米）\r\n\r\n# 精神层面\r\n# 1，多去旅行，一年至少一个国家 （存钱是不可能的）\r\n# 2，多看书、电影，一年15本书和50+部电影\r\n# 3，学好英语（对任何职业都有用）\r\n# 4，保持不甘心、保持正能量\r\n# 做事情一定要学会换位思考，要想到是否会给别人造成不好的困扰\r\n# 志不坚者智不达\r\n# 失控 必然\r\n# 浪潮之巅\r\n# 数学之美\r\n# 消费者行为学\r\n# 人生各自精彩</pre>',0,0,0,7,16),(14,'Python编码问题','17) 编码	18) Python3的执行过程	19) 常见编码错误原因	20) 后附一部分编码详细信息(个人总结，有误望指正)	    想了解Python3的编码更细致的讲解请参考大王的文章http://www.cnblogs.com/alex3...','2019-06-16 10:22:54.161150','<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	17) 编码\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	18) Python3的执行过程\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	19) 常见编码错误原因\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	20) <em>后附一部分编码详细信息(个人总结，有误望指正)</em>\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	    想了解Python3的编码更细致的讲解请参考大王的文章\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<a href=\"http://www.cnblogs.com/alex3714/articles/7550940.html\">http://www.cnblogs.com/alex3714/articles/7550940.html</a>\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	 \r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	17，编码\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	       Python2默认的文件编码是，<strong>ASCII</strong>\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	       所以默认是不支持中文，若想支持中文，要在文件顶行写上\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<strong>      #! -*- coding: utf-8 -*-</strong>\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<strong>      #! encoding: utf-8</strong>\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	Python3默认的文件编码是，<strong>UTF-8</strong>\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	Windows中文版默认编码是，<strong>GBK</strong>\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	Linux / Mac OS默认编码是，<strong>UTF-8</strong>\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	 \r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	18，Python3 的执行过程\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	    1，解释器找到代码文件，把代码字符串按文件头定义的编码加载到内存，转成Unicode\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<strong>       (</strong><strong>可以把源文件看成一个很长的字符串)</strong>\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	    2，把代码字符串按照语法规则进行语法分析\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	    3，所有的变量字符都会以Unicode编码声明\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<strong>Note</strong>：\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<strong>Python3</strong>的<strong>源文件</strong>的<strong>默认文件编码</strong>是<strong>UTF-8</strong>\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<strong>Python3</strong><strong>解释器</strong>的<strong>默认编码</strong>是<strong>Unicode</strong>\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<strong>Python2</strong>的<strong>源文件</strong>的<strong>默认文件编码</strong>是<strong>ASCII</strong>\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<strong>Python2</strong><strong>解释器</strong>的<strong>默认编码</strong>是<strong>ASCII</strong>\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	      在Python3中如果不使用默认编码，记得一定要在文件头声明；在PyCharm改没用\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<strong>python3</strong>中：默认文件编码为UTF-8\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	加载到内存后成了Unicode\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	(其实不管声明文件编码为什么，到内存中都会转成Unicode，仅限Python3)\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	在Windows终端下执行，正常显示\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	虽然Windows CMD的编码是GBK，\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	但是Unicode的作用其中之一是有跟全球所有国家语言编码的映射关系\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	 \r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<strong>python2</strong>中：默认文件编码为ascii\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	加载到内存后还是ascii，\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	就算你声明了编码是utf-8，到内存后依然是utf-8，\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	(声明什么，内存中就是什么) 所以，\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	在Windows终端下执行，显示不正常\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	因为Windows CMD的编码是GBK，\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	GBK处理不了utf-8的编码\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	只有两种途径才能正常显示：\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	1，文件头声明编码为gbk\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	2，字符串显示地转成Unicode\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	 \r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	19，常见编码错误的原因：\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	    Python解释器的默认编码\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	   Python源文件的文件编码\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	   Terminal使用的编码\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	   操作系统的语言设置\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	 \r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<img alt=\"\" src=\"https://img2018.cnblogs.com/blog/1446198/201903/1446198-20190326190808066-688206107.png\" style=\"height:auto;width:auto;\"/>\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<img alt=\"\" src=\"https://img2018.cnblogs.com/blog/1446198/201903/1446198-20190326190816364-748563173.png\" style=\"height:auto;width:auto;\"/>\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<img alt=\"\" src=\"https://img2018.cnblogs.com/blog/1446198/201903/1446198-20190326190825108-2124374299.png\" style=\"height:auto;width:auto;\"/>\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<img alt=\"\" src=\"https://img2018.cnblogs.com/blog/1446198/201903/1446198-20190326190830060-943256380.png\" style=\"height:auto;width:auto;\"/>\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<img alt=\"\" src=\"https://img2018.cnblogs.com/blog/1446198/201903/1446198-20190326190836156-372905429.png\" style=\"height:auto;width:auto;\"/>\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	 \r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	 <img alt=\"\" src=\"https://img2018.cnblogs.com/blog/1446198/201903/1446198-20190326190848205-1079017654.png\" style=\"height:auto;width:auto;\"/>\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	 \r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	 <img alt=\"\" src=\"https://img2018.cnblogs.com/blog/1446198/201903/1446198-20190326190854940-1881239553.png\" style=\"height:auto;width:auto;\"/>\r\n</p>',0,0,0,8,16),(15,'Python基础数据类型','目录：	1) 整型	2) 为什么使用16进制以及用在哪里	3) 浮点型	4) 字符串型	5) 布尔型	6) 查看数据类型	7) 复数型	8) input()	9) print()	10) % 格...','2019-06-16 10:23:28.087780','<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	目录：\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	1) 整型\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	2) 为什么使用16进制以及用在哪里\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	3) 浮点型\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	4) 字符串型\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	5) 布尔型\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	6) 查看数据类型\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	7) 复数型\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	8) input()\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	9) print()\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	10) % 格式化输出\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	11) 运算符\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	 \r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	1，整型(int)\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	      特点：\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	          不可变数据类型；\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	          理论上，无限大，并且绝对准确，上限取决于机器配置。\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	      int() --&gt; 0\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	   (3).bit_length() 作用：查看能表示这个整数的最小的位数\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	   Python中表示数的几种形式：\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	          ①二进制：0b10000 / 0B10000\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	          ②八进制：0o77 / 0O77\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	          ③十六进制：0xff / 0Xff\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	 \r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	2，为什么使用16进制以及用在哪里\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	      为什么用16进制？\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	      1，计算机硬件只能识别0和1,16进制刚好是2的倍数，更容易表达一个命令或者数据。\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	            换算的时候一个16进制数可以表示4位2进制，一个字节8位用2位16进制表示即可\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	            因此，16进制也更加简便\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	      2，ASCII字符集统一采用8位，8位用2个16进制直接就能表达出来，不管是阅读还是存储都比其他进制要方便。\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	      3，计算机中CPU运算也是遵循ASCII字符集，以16、32、64的形式在发展，因此数据交换的时候16进制也显得更好\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	      4，为了统一规范，我们看到的CPU、内存、硬盘都是采用的16进制计算\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	 \r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	      16进制用在哪里\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	      1，网络编程，数据交换的时候都是以一个字节、一个字节的形式进行处理\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	      2，数据存储，存储到硬件中是0和1二进制的形式，存储到系统中是byte形式\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	      3，一些常用值的定义，比如：html中颜色的表达\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	 \r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	3，浮点型(float)\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	      <img alt=\"\" height=\"107\" src=\"https://img2018.cnblogs.com/blog/1446198/201903/1446198-20190326183354165-121387975.png\" style=\"height:auto;width:auto;\" width=\"256\"/>\r\n</p>\r\n<p align=\"left\" style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	     特点：\r\n</p>\r\n<p class=\"1\" style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	  （1）   不可变数据类型\r\n</p>\r\n<p class=\"1\" style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	  （2）   float() ---&gt; 0.0\r\n</p>\r\n<p class=\"1\" style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	  （3）   使用53位二进制表示小数部分\r\n</p>\r\n<p class=\"1\" style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	  （4）   取值范围：-10<sup>308</sup>~10<sup>308</sup>\r\n</p>\r\n<p class=\"1\" style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	  （5）   Python中默认的精度是17位，也就是小数点后16位，10<sup>-16</sup>。\r\n</p>\r\n<p class=\"1\" style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	              尽管有16位，但是这个精确度却是越往后越不准，不是只有Python会这样，其他语言也一样。\r\n</p>\r\n<p class=\"1\" style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<strong><em>                   但可以使用第三方模块Decimal解决精度问题，后续再介绍。</em></strong>\r\n</p>\r\n<p class=\"1\" style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	  （6）   Python中，只要有小数点.就是浮点类型\r\n</p>\r\n<p class=\"1\" style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	  （7）   数字过去大或接近于0，将用科学计数法表示\r\n</p>\r\n<p align=\"left\" style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	  （8）   科学计数法(scientific notation)：\r\n</p>\r\n<p align=\"left\" style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	              是指把一个数表示成a x 10的n次幂的形式(1 &lt;= a &lt; 10, n为正整数)\r\n</p>\r\n<p align=\"left\" style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	              例如：\r\n</p>\r\n<p align=\"left\" style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	                     19971400000000 = 1.99714 x 10^13\r\n</p>\r\n<p align=\"left\" style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	                     计算器或者计算机表达10的多少次幂一般使用E或e，上例则表示为：1.99714E13\r\n</p>\r\n<p align=\"left\" style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	                     用幂的形式，可以方便地表示日常生活中遇到的一些较大的数\r\n</p>\r\n<p align=\"left\" style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	4，字符串(str)\r\n</p>\r\n<p align=\"left\" style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	   str() ---&gt; ‘’\r\n</p>\r\n<p align=\"left\" style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	   空字符串是任何字符串的子字符串\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	   表示：① ‘......’ / “......”\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	              ② ’’’......’’’ / “””......”””\r\n</p>\r\n<p class=\"1\" style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	   没有赋值给变量时，起多行注释的作用；\r\n</p>\r\n<p class=\"1\" style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	   赋值于一个变量，起字符串的作用，并且可以预格式化 (你怎么写的，就怎么输出)\r\n</p>\r\n<p class=\"1\" style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	   <img alt=\"\" src=\"https://img2018.cnblogs.com/blog/1446198/201903/1446198-20190326183545727-2025629813.png\" style=\"height:auto;width:auto;\"/>\r\n</p>\r\n<p class=\"1\" style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<strong>   Note</strong><strong>：</strong>\r\n</p>\r\n<p class=\"1\" style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<strong>           </strong><strong>引号的匹配顺序是从左往右</strong>\r\n</p>\r\n<p class=\"1\" style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<strong>    <img alt=\"\" src=\"https://img2018.cnblogs.com/blog/1446198/201903/1446198-20190326183606517-1149128059.png\" style=\"height:auto;width:auto;\"/>    (┭┮﹏┭┮我在这个题上卡了一个多小时)</strong>\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	 \r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	 \r\n</p>\r\n<p align=\"left\" style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	5，布尔型(bool) \r\n</p>\r\n<p align=\"left\" style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	   bool() ---&gt; False\r\n</p>\r\n<p align=\"left\" style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	   特点：\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	          两个值True 与 False，同时也是关键字；\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	          数字0、空字符串、复数0j、None、空列表、空元组、空字典、空集合 都为<strong>False</strong>；其余为<strong>True </strong>    \r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	 运算时，True相当于1，False相当于0；\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	    布尔是int类型的子类；\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	    True / False是布尔的实例对象\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	    <img alt=\"\" src=\"https://img2018.cnblogs.com/blog/1446198/201903/1446198-20190326183856271-312271469.png\" style=\"height:auto;width:auto;\"/>\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	6，查看数据类型\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	   type()\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	    <img alt=\"\" src=\"https://img2018.cnblogs.com/blog/1446198/201903/1446198-20190326183935660-216061212.png\" style=\"height:auto;width:auto;\"/>\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	 \r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	7，复数型(complex)\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	      complex() ---&gt; 0j\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	       一般情况下用不到，涉及工程领域会用到\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	    （1）4+2j / 4+2J 数学上是用i表示，j是工程上的表示\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	             i或者j是虚数单位\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	    （2）(4+2j).real → 4.0 （获取实部） |  (4+2J).imag → 2.0 （获取虚部）\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	             当虚部等于零时，这个复数就是实数；\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	             当虚部不等于零时，这个复数就是虚数；\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	       <img alt=\"\" src=\"https://img2018.cnblogs.com/blog/1446198/201903/1446198-20190326183953869-1001190826.png\" style=\"height:auto;width:auto;\"/>\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	8，输入函数input()\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	   参数为一个用于提示的字符串，返回一个用户输入的字符串。\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	      <img alt=\"\" src=\"https://img2018.cnblogs.com/blog/1446198/201903/1446198-20190326184028281-635980330.png\" style=\"height:auto;width:auto;\"/>\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	 \r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	9，输出函数 print()\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	  1) 输出括号内的内容，可输出多个参数；\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	  2) 输出效果：参数之间默认用空格分隔\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	  3) 参数<strong>sep</strong>可指定分隔的字符；\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	  <img alt=\"\" src=\"https://img2018.cnblogs.com/blog/1446198/201903/1446198-20190326184039907-1709463624.png\" style=\"height:auto;width:auto;\"/>\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	  4) print()函数，输出完后，默认会输出一个换行；\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	  <img alt=\"\" src=\"https://img2018.cnblogs.com/blog/1446198/201903/1446198-20190326184054918-173019232.png\" style=\"height:auto;width:auto;\"/>\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<strong>  PS</strong><strong>：</strong>使用分号; 可以在一行写多个语句或者冒号: 后面语句不多的话，也可以直接写，\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	  虽然可以这样，但是根据Python开发规范在正式开发中并不推荐这样写，最好一行一条语句。\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	 \r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<strong><em>  如果，我想让他不换行或者参数输出完后，输出一个别的，怎么办呢？</em></strong>\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<strong>  the answer is :</strong> 参数<strong>end</strong>可以指定输出字符\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	  <img alt=\"\" src=\"https://img2018.cnblogs.com/blog/1446198/201903/1446198-20190326184106616-664253387.png\" style=\"height:auto;width:auto;\"/>\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<strong>  Note</strong>：print()函数用太多会影响性能\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	 \r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	10，% 格式化输出\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	   <img alt=\"\" src=\"https://img2018.cnblogs.com/blog/1446198/201903/1446198-20190326184125874-1056997983.png\" style=\"height:auto;width:auto;\"/>\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<strong>  %s</strong><strong>：</strong>\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	    接受任何类型，原样输出（会将<strong>o</strong>、<strong>x</strong>、<strong>X</strong>的数据转成十进制）\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	    当参数项只有一个时，可以加括号也可不加，最好加，易读。\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<strong>    Note</strong><strong>：</strong><em>参数和格式控制符数量必须要相同，否则会报错</em>\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<strong>  %r</strong><strong>：</strong>\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	     会将字符串类型原样输出，也就是字符串的输出结果有引号，其他跟<strong>%s</strong>一样\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<strong>  %c</strong><strong>：</strong>\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	       只接受<strong>单个字符</strong>或者<strong>整型</strong>\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<strong>  <img alt=\"\" src=\"https://img2018.cnblogs.com/blog/1446198/201903/1446198-20190326184150013-1890272815.png\" style=\"height:auto;width:auto;\"/></strong>\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<strong>  %d</strong><strong>：</strong>\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	    只接受数字；\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	    会将<strong>float</strong>类型取整输出；\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<strong>    o</strong>、<strong>x</strong>、<strong>X</strong>会转化为十进制。\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<strong>    %f</strong><strong>、e、E：</strong>\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	    也是只接受数字，按浮点类型格式输出和科学计数表示法输出（6位小数）；\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<strong>    o</strong>、<strong>x</strong>、<strong>X</strong>会转化为十进制。\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<strong>    %o</strong><strong>、x、X：</strong>\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	    只接受整型\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<strong>  %</strong><strong>：</strong>\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<strong>    Note</strong><strong>：</strong>当使用<strong>%</strong>这种方式进行格式化时，想输出百分号%，只能使用两个%（%%）\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	    当不使用<strong>%</strong>这种方式时，想输出百分号%，直接写即可。\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	    <img alt=\"\" src=\"https://img2018.cnblogs.com/blog/1446198/201903/1446198-20190326184203791-527063778.png\" style=\"height:auto;width:auto;\"/>\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<strong>% </strong>格式化完整格式\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<strong>  %</strong><strong>(keys)</strong><strong>+</strong><strong>-</strong><strong>13</strong><strong>.5</strong><strong>s</strong>\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<strong>    +</strong>：输出正负号，格式控制符除了src其它都有效果\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<strong>    -</strong>：左对齐，默认都是右对齐（不管数字还是字符串）\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<strong>    13</strong>：输出宽度，占13位，参数长度小于指定的宽度，左或右补空格\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<strong>    .5</strong>：浮点数，表示保留几位小数；字符串，表示输出多少个字符；\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<strong>    (keys)</strong>：用于dict字典类型的键名。<strong>Note: 字典不能和单个元素混用</strong>\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	  \r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	11，运算符\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<a href=\"https://www.cnblogs.com/hardy9sap/p/10602679.html\" target=\"_blank\">Clik me!</a>\r\n</p>',0,0,0,8,16),(16,'计算机基础','目录：	1) 什么是编程？	2) 编程延伸于?	3) 编程语言的分类	4) 学习计算机基础的意义	5) 什么是计算机	6) 计算机的基本组成	7) 组装计算机	8) 为什么计算机只认识加法	9) 八进制来...','2019-06-16 10:24:13.108737','<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	目录：\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	1) 什么是编程？\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	2) 编程延伸于?\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	3) 编程语言的分类\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	4) 学习计算机基础的意义\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	5) 什么是计算机\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	6) 计算机的基本组成\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	7) 组装计算机\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	8) 为什么计算机只认识加法\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	9) 八进制来源\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	10) 计算机系统设计的“开山鼻祖”\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	11) 世界公认的第一名软件工程师\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	12) 莱布尼茨提出“二进制”思路的其中一个说法\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	13) bug小故事\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	14) 二战小故事\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	15) 计算机之父\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	16) 世界上第一台电子计算机\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	17) 进制转换\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	18) 进制中的基数、数码、位权\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	19) 计算机中的单位\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	20) 杂谈\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	 \r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	===================================================================\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	 \r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	1， 编程：通俗讲就是写代码，让计算机帮我们去做事\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	2， ‘编程’一词延伸于，杰卡德编织机。\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	3，编程语言的分类：\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	    ① 机器语言\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	        a) 计算机底层只能识别0和1，那么由0和1描述的指令称为机器指令；\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	        b) 所有机器指令组成的集合称为机器语言；\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	        c) 由机器语言编写的程序称为目标程序；\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	        d) 只有目标程序才能被计算机直接识别和执行；\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	        e) 机器语言属于低级语言，是最底层的语言；\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	        f) 除了计算机生产厂家的专业人员外，绝大多数的程序员已经不再去学习机器语言了；\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	        g) 机器语言是微处理器理解和使用的。\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	       \r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	    ② 汇编语言\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	        a) 与机器语言相比并没有实质的区别，只是将机器指令换成了便于理解、记忆和使用的单词，比较底层；\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	        b) 由汇编语言编写的程序称为汇编程序\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	        c) 用汇编语言所能完成的操作不是一般高级语言所能够实现的，\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	           而且源程序经汇编生成的可执行文件不仅比较小，而且执行速度很快。\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	          \r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	    ③ 高级语言\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	        由高级语言所编写的程序不能直接被计算机所识别，必须转换成机器语言才能被执行，\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	        而转换方式决定了高级语言种类之间的本质区别。\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	        分类：\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	        ① 编译型\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	                     C, C++, Delphi\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	            将代码一次性翻译成目标代码(*.obj)，生成可执行文件，可以脱离语言环境独立使用，所以使用方便、运行速度快\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	            如果中间代码出现错误，修改后，只能从头开始再翻译，所以开发效率低\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	            在某个平台上开发的程序放到另一个平台上，不一定能正常运行，所以跨平台性差\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	 \r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	        ② 解释型\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	                     C#, Python, JAVA, JavaScript, Ruby, PHP\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	            将代码交给解释器逐行翻译成目标代码，并且逐行执行，类似生活中的”同声传译“\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	                优：\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	                    开发效率高\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	                    可以跨平台\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	                劣：\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	                    运行速度慢\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	                    依赖解释器\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	 \r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	4, 认识计算机的思想以及意义\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	       我一老哥是写了几十年程序的老码农，敲过的代码可以绕地球两圈，然而就在它如日中天，正在绕地球第三圈的途中，老哥越发感觉力不从心，好多底层知识不懂，越往高端学越贴近底层。\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	 \r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	5, 计算机:\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	         计算机是用来计算和通讯的；\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	计算机，俗称‘电脑’，电子人脑。能够进行数值计算、逻辑计算以及记忆存储功能, 能够按照程序运行，自动、高速处理海量数据的现代化智能电子设备。通俗讲: 最初发明计算机，是为了进行科学计算，只要能进行数据处理（计算、运算）的，都可以称之为计算机，比如：计算器。\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	 \r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	6, 计算机的基本组成\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	         主板、CPU、内存\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	         计算机最底层是 电子电路，计算机只能识别高电频 和 低电频，也就是1、0\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	 \r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	7, 组装计算机\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	         CPU 看主频、核心数\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	         内存 看大小、型号（一般就DDR4、显卡用DDR5）、主频（海盗船、玩家国度）\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	         显卡 看显存、型号（比如：N卡 GTX <span style=\"color:#00FFFF;\">10</span><span style=\"color:#FF0000;\">80</span>  红色的数值越高越厉害、蓝色的数值代表第十代产品，N卡玩游戏； A卡作图）、位宽（数值越高代表数据进出量越高，则性能越好）\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	         硬盘 （反正市面上，能买到三星正品的机率很小，而且也特别贵）\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	 \r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	8, 计算机实际上只认识加法，为什么？\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	首先来了解，机器数和真值\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	1， 机器数\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	       一个数在计算机中的二进制形式，叫做这个数的机器数。\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	      机器数是带符号的，最高位存放符号，正数为0，负数为1\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	      例：+3，<span style=\"color:#FF0000;\"><strong>0</strong></span>0000011；\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	              -3，<span style=\"color:#FF0000;\"><strong>1</strong></span>0000011\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	2， 真值\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	       将机器数的符号位0和1符号化成+和-\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	       例：<span style=\"color:#FF0000;\"><strong>0</strong></span>0000011的真值 = <span style=\"color:#FF0000;\"><strong>+</strong></span>0000011 = +3，\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<strong>             <span style=\"color:#FF0000;\"> 1</span></strong>0000011的真值 = <span style=\"color:#FF0000;\"><strong>-</strong></span>0000011 = -3\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	 再来了解，原码、反码和补码\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	       首先，因为人脑可以知道第一位是符号位，在计算的时候我们会根据符号位，选择对真值区域的加减。但是对于计算机，加减乘除已经是最基础的运算，要设计得尽量简单，计算机辨别‘符号位’显然会让计算机的基础电路设计变得十分复杂！于是人们想出了将符号位也参与运算的方法。我们知道，根据运算法则减去一个正数等于加上一个负数。\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	即：1 - 1 = 1 + (-1) = 0,<strong><span style=\"color:#FF0000;\">所以机器可以只有加法而没有减法</span>，</strong>这样计算机运算的设计就更简单了\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	       原码、反码和补码都是有符号的用二进制表示数的方法，均由<span style=\"color:#FF0000;\"><strong>符号位</strong></span>和<span style=\"color:#FF0000;\"><strong>数值位</strong></span>构成\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	1， 原码\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	原码是由0和1表示的符号位加上真值的绝对值，即用第一位表示符号，其余为表示值。\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	例：-3 = 1[-0000011] = 1000 0011\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	      +3 = 0[+0000011] = 0000 0011\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	      原码是人脑最容易理解和计算的表示方式\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	2， 反码\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	正数的反码是其原码本身\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	负数的反码是在其原码的基础上，符号位不变，其余各个位取反\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	例：-3 = 1[-0000011] = (1000 0011)原 = (1111 1100)反\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	      +3 = 0[+0000011] = (0000 0011)原 = (0000 0011)反\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	3， 补码\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	正数的补码就是其本身\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	负数的补码就是在反码的基础上+1\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	例：-3 = 1[-0000011] = (1000 0011)原 = (1111 1100)反 = (1111 1101)补\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	      +3 = 0[+0000011] = (0000 0011)原 = (0000 0011)反 = (0000 0011)补\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	在计算机系统中，数值一律用补码来表示（存储）\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<strong>       <span style=\"color:#FF0000;\">主要原因</span></strong>：使用补码，可以将符号位和其它位统一处理；\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	                         同时，减法也可按加法来处理；\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	                         另外，两个用补码表示的数相加时，如果最高位（符号位）有进位，则进位被舍弃；\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	                         补码与原码的转换过程几乎是相同的。\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	 \r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	9， 小型机引入了‘八进制’\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	 \r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	10，巴贝奇，计算机系统设计的‘开山鼻祖’；\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	 \r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	11，Ada(阿达)，世界公认的第一名软件工程师,；\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	 \r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	12，莱布尼茨独立发明微积分与牛顿齐名，又对计算机提出‘二进制’的设计思路。\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	       其中有一个说法，他提出‘二进制’的思路，来源于中国。公元1700左右，莱布尼茨的一位友人送于他一幅画，名为‘八卦’，是宋朝人邵雍摹绘的一张‘易图’。莱布尼茨用放大镜仔细观察八卦的每一卦象，发现它们都是由阳（-）和阴（--）两种符号组成。若认为阳为‘1’，阴为‘0’，八卦恰好组成了二进制000到111共8个基本序数。正是在中国人睿智的启迪下，莱布尼茨最终悟出了二进制之真谛。虽然，他自己设计的计算机用的还是十进制，但他率先系统提出了二进制数的运算法则，直到今天，二进制数仍然左右着现代电脑的高速运算。\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	 \r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	13，‘bug’的由来：\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	        世界上第一台大型计算机Mark 1，为它编写程序的是一位女数学家格雷斯·霍波（G· Hopper）（第三名程序员）。有一天，她在调试程序时出现了故障，拆开了继电器后，发现有只飞蛾夹扁在触点中间，从而‘卡’住了机器运行。于是，Hopper诙谐地把程序故障统称为‘臭虫’（bug），而这一奇怪的‘称呼’，后来成为计算机领域的专业行话，调试程序就叫做‘Debug’。（反bug）\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	 \r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	14，二战，最后以美国、苏联、中国、英国等反法西斯国家和世界人民战胜侵略者而终止。其终止的真正的原因是美国向日本的广岛和长崎投掷了两颗原子弹。但本来是投掷到日本东京的。中途出现了误差，为了计算精确，美国组织科学研制计算机。\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	 \r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	15，计算机之父：冯洛伊曼\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	 \r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	16，1946年2月14，西方情人节，美国军方定制的世界上第一台电子计算机‘ENIAC’（电子数字积分计算机）在美国宾夕法尼亚大学问世了。是美国奥伯丁武器试验场为了满足计算弹道需要而研制的。\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	 \r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	17,  <a href=\"https://www.cnblogs.com/hardy9sap/p/10324838.html\" target=\"_blank\">进制转换</a>\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	 \r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	18，进制中的基数、数码、位权\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	       基数：例如十进制，基数为10\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	       数码：例如十进制，0、1、2、3、4...就是十进制的数码\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	       位权：例如十进制，从低位到高位(右 至 左) 依次表示为10的0次方、10的1次方...\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	 \r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	19，计算机中的单位\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<span style=\"color:#00FFFF;\"><strong>  0</strong></span>或<span style=\"color:#FF0000;\">1</span>所占的空间单位为bit(比特),是计算机中最小的表示单位\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	  8bit = 1Bytes （字节），是计算机中最小的存储单位\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	  1KB = 1024B\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	  1MB = 1024KB\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	  1GB = 1024MB\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	  1TB = 1024GB\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	  1PB = 1024TB\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	  1EB = 1024PB\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	  1ZB = 1024EB\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	  1YB = 1024ZB\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	  1BB = 1024YB\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	 \r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	20，杂谈：\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	       （1）google： 10<sup>100</sup>\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	       （2）google-plex：10<sup>google</sup> \r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	       （3）宇宙直径：约 10<sup>26</sup>米\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	       （4）宇宙粒子数：约 10<sup>80</sup>个\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	       （5）地球沙粒数：约 7.5x10<sup>18</sup>\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	       （6）宇宙大爆炸后(准确说是，大爆炸后的普朗克时间)的宇宙密度：10<sup>96</sup>千克/立方米\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	       （7）1英寸 = 2.54厘米\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	       （8）球的体积：4/3 * PI*R<sup>3</sup>\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	       （9）圆的面积：PI * R<sup>2</sup>\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	       （10）三角形的面积：底 * 高 * 0.5\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	       （11）黄金比例：长边比短边，1.618；短边比长边，0.618\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	       （12）毕达哥拉斯定理（勾股定理）计算笛卡尔平面上的两点之间的距离\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	                   A: (x1, y1)      B: (x2, y2)\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	                  dist = sqrt((x1 – x2)<sup>2</sup> + (y1 – y2)<sup>2</sup>)\r\n</p>',0,0,0,8,16),(17,'Git 基础教程 之 撤销修改','Git跟踪并管理的是修改，而非文件。每次修改，如果不用git add到暂存区，那就不会加入到commit中，要么全部改完后，再add → commit ；要么改一点，就add → commit。	 撤销修改场景1：当你该乱工作区某个文件内容，想直接丢弃修改是，用命令：...','2019-06-16 10:34:10.780766','<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<span style=\"color:#FF0000;\"><strong>Git</strong></span><strong><span style=\"color:#FF0000;\">跟踪并管理的是修改，而非文件</span>。</strong><strong>每次修改，如果不用git add到暂存区，那就不会加入到commit中，</strong>\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<strong><span style=\"color:#FF0000;\">要么全部改完后，再add → commit</span> ；<span style=\"color:#FF0000;\">要么改一点，就add → commit。</span></strong>\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	 \r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<span style=\"font-size:18px;\"><strong>撤销修改</strong></span>\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<strong>场景1：当你该乱工作区某个文件内容，想直接丢弃修改是，用命令：</strong>\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<strong>     <span style=\"color:#FF0000;\"> git checkout -- readme.txt</span></strong>\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<strong><span style=\"color:#FF0000;\"><img alt=\"\" src=\"https://images2018.cnblogs.com/blog/1446198/201807/1446198-20180720125055649-2114599387.png\" style=\"height:auto;width:auto;\"/></span></strong>\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<strong><span style=\"color:#FF0000;\"><span style=\"color:#000000;\">PS：</span> git diff HEAD -- readme.txt</span>比较版本库和工作区文件的区别</strong>\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	 \r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<strong>场景2：当你不仅改乱了工作区某个文件的内容，还添加到了暂存区，想丢弃修改是，用命令(分两步)：</strong>\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<span style=\"color:#FF0000;\"><strong>①  </strong><strong>git reset HEAD readme.txt</strong></span>\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<strong>      作用是，撤销暂存区的修改，回退到工作区。</strong>\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<span style=\"color:#FF0000;\"><strong>②  </strong><strong>git checkout -- readme.txt</strong></span>\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<span style=\"color:#FF0000;\"><strong><img alt=\"\" src=\"https://images2018.cnblogs.com/blog/1446198/201807/1446198-20180720125237033-459332153.png\" style=\"height:auto;width:auto;\"/></strong></span>\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<strong>场景3：若已经提交到了版本库，则</strong>\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<strong>     <span style=\"color:#FF0000;\"> git reset --hard HEAD^ </span> (</strong><strong>前提是，没有推送到远程版本库)</strong>\r\n</p>',0,0,0,10,17),(18,'Git 基础教程 之 暂存区','工作区(working directory)，就是目录，例如：pythonwork版本库(Repository)，工作区有一个隐藏的目录 .git 就是Git的版本库。版本库最重要的是称为stage 或 index 的暂存区；还有Git为我们创建的一个分支 master ，以及指...','2019-06-16 10:34:32.026625','<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<span style=\"color:#FF0000;\"><strong>工作区(working directory)</strong></span><strong>，就是目录，例如：pythonwork</strong>\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<span style=\"color:#FF0000;\"><strong>版本库(Repository)</strong></span><strong>，工作区有一个隐藏的目录 .git 就是Git的版本库。</strong>\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<strong>版本库最重要的是称为<span style=\"color:#FF0000;\">stage</span> 或<span style=\"color:#FF0000;\"> index</span> 的暂存区；</strong>\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<strong>还有Git为我们创建的一个分支 <span style=\"color:#FF0000;\">master</span> ，以及指向 master 的一个指针 <span style=\"color:#FF0000;\">HEAD</span>。</strong>\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<strong> </strong>\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<span style=\"color:#FF0000;\"><strong>把文件往Git版本库添加时，分了两步：</strong></span>\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<strong>①   </strong><strong>git add </strong><strong>添加操作，实际上是把文件修改添加到暂存区</strong>\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<strong>②   </strong><strong>git commit </strong><strong>提交操作，实际上是把暂存区的所有内容提交到当前分支</strong>\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	 \r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<span style=\"color:#FF0000;\"><strong>图解：</strong></span>\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<span style=\"color:#FF0000;\"><strong><img alt=\"\" src=\"https://images2018.cnblogs.com/blog/1446198/201807/1446198-20180720124428429-1541114487.png\" style=\"height:auto;width:auto;\"/></strong></span>\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<img alt=\"\" src=\"https://images2018.cnblogs.com/blog/1446198/201807/1446198-20180720124434861-1653575224.png\" style=\"height:auto;width:auto;\"/>\r\n</p>',0,0,0,10,17),(19,'Git 基础教程 之 Git 安装 (windows)','一，安装Git，访问下面网址进行下载https://www.git-scm.com/download/或者https://pan.baidu.com/s/19imFBVHA2Yibmw1dyzatDg 密码：q650二，安装后，找到Git Bash，进行简要配置 (右击桌面...','2019-06-16 10:34:55.789066','<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<strong>一，安装Git，访问下面网址进行下载</strong>\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<a href=\"https://www.git-scm.com/download/\">https://www.git-scm.com/download/</a>\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<strong>或者</strong>\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<strong><a href=\"https://pan.baidu.com/s/19imFBVHA2Yibmw1dyzatDg\">https://pan.baidu.com/s/19imFBVHA2Yibmw1dyzatDg</a> </strong><strong>密码：q650</strong>\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<strong>二，安装后，找到Git Bash，进行简要配置 (右击桌面，一般就能找到)</strong>\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<strong><img alt=\"\" height=\"297\" src=\"https://images2018.cnblogs.com/blog/1446198/201807/1446198-20180720112843400-249247466.png\" style=\"height:auto;width:auto;\" width=\"231\"/></strong>\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	 <img alt=\"\" src=\"https://images2018.cnblogs.com/blog/1446198/201807/1446198-20180720112345878-2044928785.png\" style=\"height:auto;width:auto;\"/>\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<strong>三，输入：</strong>\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<strong>git config --global user.name “<span>hardy</span>”</strong>\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	 <img alt=\"\" src=\"https://images2018.cnblogs.com/blog/1446198/201807/1446198-20180720112940996-131874032.png\" style=\"height:auto;width:auto;\"/>\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<strong>git config --global user.email “<span>hardy9sap@163.com</span>”</strong>\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	 <img alt=\"\" src=\"https://images2018.cnblogs.com/blog/1446198/201807/1446198-20180720112950185-2013749961.png\" style=\"height:auto;width:auto;\"/>\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	 \r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<span style=\"color:#FF0000;\"><strong>PS：</strong></span>①下划线的地方，可替换成你自己想要输入的名字和邮箱。\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	  ②Git 是分布式版本控制系统，所以每个机器都必须自报家门，<strong>--global </strong>表示这台机器上所有的Git 仓库都会使用这个配置，也就是针对当前用户起作用的；不加，则表示对当前仓库有效。\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	  ③用户的配置文件放在用户目录下一个名为<strong> .gitconfig </strong>的隐藏文件中；仓库的配置文件放在<strong> .git\\config </strong>中；进行配置时，可直接在配置文件中进行，若改乱了，可以删除文件，通过命令配置。\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	  ④所有的版本控制系统，其实只能跟踪文本文件的改动。如，TXT、网页、代码等；而，图片、视频等，虽也能被管理，但无法跟踪变化。\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	  ⑤进行纯文本编辑时，使用Notepad ++ 比 windows自带的记事本，要好很多；并且，将编码设置为：<strong>UTF-8 without BOM</strong>。可访问下面链接，下载：\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<strong>链接：<a href=\"https://pan.baidu.com/s/1NXYvzLJ7CfUPnuu_APm_kQ\">https://pan.baidu.com/s/1NXYvzLJ7CfUPnuu_APm_kQ</a>  密码：bfiu</strong>\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<strong><img alt=\"\" src=\"https://images2018.cnblogs.com/blog/1446198/201807/1446198-20180720113244052-1962991270.png\" style=\"height:auto;width:auto;\"/></strong>\r\n</p>',0,0,0,10,17),(20,'Git 基础教程 之 添加、提交','一， 编写一个名为readme.txt文件，放入pythonwork目录下①   手动新建②   使用命令： a. touch readme.txt        b. vim readme.txtPS： 使用vim 命令打开文件时，默认为命令模式；...','2019-06-16 10:35:25.642051','<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<strong>一， </strong><strong>编写一个名为readme.txt文件，放入pythonwork目录下</strong>\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<strong>①   </strong><strong>手动新建</strong>\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<strong>②   </strong><strong>使用命令：<span style=\"color:#FF0000;\"> a.</span> touch readme.txt</strong>\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<strong><img alt=\"\" src=\"https://images2018.cnblogs.com/blog/1446198/201807/1446198-20180720122312358-1663118998.png\" style=\"height:auto;width:auto;\"/></strong>\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<strong>        <span style=\"color:#FF0000;\">b. </span></strong><strong>vim readme.txt</strong>\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<img alt=\"\" src=\"https://images2018.cnblogs.com/blog/1446198/201807/1446198-20180720122417186-1295411204.png\" style=\"height:auto;width:auto;\"/>\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<img alt=\"\" src=\"https://images2018.cnblogs.com/blog/1446198/201807/1446198-20180720122424086-296097729.png\" style=\"height:auto;width:auto;\"/>\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<span style=\"color:#FF0000;\"><strong>PS</strong><strong>： </strong></span><strong>使用</strong><strong>vim </strong><strong>命令打开文件时，默认为命令模式；</strong>\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<strong>    按</strong><strong><span style=\"color:#FF0000;\"> i</span> </strong><strong>或</strong><span style=\"color:#FF0000;\"><strong>insert</strong></span><strong>键 可进入插入模式，进行编辑；</strong>\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<strong>    按</strong><span style=\"color:#FF0000;\"><strong>ESC</strong></span><strong>退回命令模式，按</strong><strong><span style=\"color:#FF0000;\">ZZ</span> </strong><strong>或</strong><span style=\"color:#FF0000;\"><strong> :wq </strong></span><strong>保存并退出；</strong>\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<strong>    按</strong><strong><span style=\"color:#FF0000;\"> :w</span> </strong><strong>保存不退出，留在命令模式；</strong>\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<strong>    按</strong><span style=\"color:#FF0000;\"><strong> :q! </strong></span><strong>放弃所有修改并退出；</strong>\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<strong>    按</strong><strong><span style=\"color:#FF0000;\"> :e!</span> </strong><strong>放弃修改但不退出，留在命令模式。</strong>\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<strong>二，</strong><strong>添加 和 提交</strong>\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<span style=\"color:#FF0000;\"><strong>Step 1 : </strong></span><strong>git add readme.txt</strong>\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<strong>       git add <span>    </span> </strong><strong>把文件添加到仓库，也可以一次添加多个文件</strong>\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<strong><span style=\"color:#FF0000;\">Step 2 :</span> </strong><strong>git commit -m “readme.txt”</strong>\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<strong>            git commit -m “ <span>    </span>“ </strong><strong>把文件提交到仓库，参数 -m以及下划线的地方表示本次提交的说明，最好写有意义的，以便日后从历史记录中找到改动记录</strong>\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<img alt=\"\" src=\"https://images2018.cnblogs.com/blog/1446198/201807/1446198-20180720122621120-1649469433.png\" style=\"height:auto;width:auto;\"/>\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<strong>      <span style=\"color:#FF0000;\"> PS</span></strong><strong><span style=\"color:#FF0000;\">：</span> git status 查看仓库当前状态</strong>\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<strong>三， 修改readme.txt文件</strong>\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<strong>        </strong><strong>在readme.txt文件末尾添加 “</strong><strong>This is my first time to write a turorial.</strong><strong>”，保存并退出。</strong>\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<img alt=\"\" src=\"https://images2018.cnblogs.com/blog/1446198/201807/1446198-20180720122652029-1269281377.png\" style=\"height:auto;width:auto;\"/>\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<strong><span style=\"color:#FF0000;\">git diff readme.txt</span> 可查看文件修改内容</strong>\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<strong><img alt=\"\" src=\"https://images2018.cnblogs.com/blog/1446198/201807/1446198-20180720122716921-1343809240.png\" style=\"height:auto;width:auto;\"/></strong>\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<strong>知道了做了什么修改后，再提交更新就放心了。</strong>\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<strong> </strong><strong>执行：</strong><span style=\"color:#FF0000;\"><strong>git add readme.txt</strong></span>\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<span style=\"color:#FF0000;\"><strong>           git commit -m “first time”</strong></span>\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<img alt=\"\" src=\"https://images2018.cnblogs.com/blog/1446198/201807/1446198-20180720122759971-1813546585.png\" style=\"height:auto;width:auto;\"/>\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<strong>表示 文件修改内容还未添加到仓库</strong>\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<img alt=\"\" src=\"https://images2018.cnblogs.com/blog/1446198/201807/1446198-20180720122812836-1990987522.png\" style=\"height:auto;width:auto;\"/>\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<strong>表示 文件已添加到仓库，但未提交</strong>\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<img alt=\"\" src=\"https://images2018.cnblogs.com/blog/1446198/201807/1446198-20180720122823563-1335993864.png\" style=\"height:auto;width:auto;\"/>\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<strong>表示 文件已经可以被Git 所跟踪管理了。</strong>\r\n</p>',0,0,0,10,17),(21,'Git 基础教程 之 Bug分支和Stash','在Git中，每个Bug都可以通过一个新的临时分支修复，修复后，合并分支，然后删除。①    当接到一个Bug任务时，但dev上进行的工作还没有提交时：②    git stash 把现场工作“储藏”起来，等以后恢复现场后继续工作  用git status查看工作区时，是干净的（除...','2019-06-16 10:35:47.941307','<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<strong>在Git中，每个Bug都可以通过一个新的临时分支修复，修复后，合并分支，然后删除。</strong>\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<strong>①    </strong><strong>当接到一个Bug任务时，但dev上进行的工作还没有提交时：</strong>\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<strong>②    </strong><strong>git stash 把现场工作“储藏”起来，等以后恢复现场后继续工作</strong>\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<strong>  用git status查看工作区时，是干净的（除非有没有被Git管理的文件）</strong>\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<strong>③    </strong><strong>确定在哪个分支上修复Bug，假定master ，则</strong>\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<strong>④    </strong><strong>git checkout -b issue-101</strong>\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<strong>⑤    </strong><strong>修复后，add, commit</strong>\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<strong>⑥    </strong><strong>切回 master，合并，删除</strong>\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<strong>⑦    </strong><strong>返回dev</strong>\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<strong>  git stash list 查看储存的工作区</strong>\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<strong>⑧    </strong><strong>恢复</strong>\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	 \r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	你可以多次stash， 恢复时，先用<span style=\"color:#FF0000;\"><strong>git stash list</strong></span>查看，然后恢复指定的stash。\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	 \r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	      \r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<span style=\"color:#FF0000;\"><strong>git stash save “……” </strong></span>储藏时，添加注释信息\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<span style=\"color:#FF0000;\"><strong>git stash pop [--index] [stash_id] </strong></span>除了恢复进度后，还会删除当前进度\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	            <span style=\"color:#FF0000;\">  a, git stash pop</span> 恢复最新进度到工作区(git默认会把工作区和暂存区的改动都恢复到工作区)\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	             <span style=\"color:#FF0000;\"> b, git stash --index</span> 恢复最新进度到工作区和暂存区\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	            <span style=\"color:#FF0000;\">  c, git stash pop stash@{0}</span> 恢复指定进度到工作区\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	             <span style=\"color:#FF0000;\"> d, git stash pop --index stash@{0}</span>\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<strong><span style=\"color:#FF0000;\">git stash apply [--index] [stash_id]</span> </strong>恢复进度后，不会删除当前进度，其他跟pop一样\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<span style=\"color:#FF0000;\"><strong>git stash drop [stash_id]</strong></span>\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	              删除一个储存的进度，若不指定stash_id，则默认删除最新的存储进度\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<span style=\"color:#FF0000;\"><strong>git stash clear</strong></span>\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	              删除所有存储的进度\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<span style=\"color:#FF0000;\"><strong>[stash_id] </strong></span>由 git stash list 获得\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	 \r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	 \r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n	当开发一个新功能时，可创建一个feature分支，在此上面开发，开发完毕后，再合并到dev, 再合并到master。\r\n</p>',0,0,0,10,17),(22,'Git 基础教程 之 --no-ff模式合并','①  创建并切换dev分支②  修改readme.txt，并add，commit③  切回master④  合并git merge --no-ff -m “merge with no-ff”dev --no-ff模式， 普通合并，有历史，看得出做过合并fa...','2019-06-16 10:36:53.023165','<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<strong>①  </strong><strong>创建并切换dev分支</strong>\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<strong>②  </strong><strong>修改readme.txt，并add，commit</strong>\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<strong>③  </strong><strong>切回master</strong>\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<strong>④  </strong><strong>合并</strong>\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<span style=\"color:#FF0000;\"><strong>git merge --no-ff -m “merge with no-ff”dev</strong></span>\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<strong> </strong>\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<span style=\"color:#FF0000;\"><strong>--no-ff</strong></span><strong><span style=\"color:#FF0000;\">模式，</span> 普通合并，有历史，看得出做过合并</strong>\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<span style=\"color:#FF0000;\"><strong>fast forward</strong></span><strong><span style=\"color:#FF0000;\">模式</span>，快速合并，看不出做过合并</strong>\r\n</p>\r\n<p style=\'text-align:justify;font-family:\"background-color:#FFFFFF;\'>\r\n<strong>通常，合并分支时，Git尽可能用 fast forward 模式，但这种模式，删除分支后，会丢掉分支信息。</strong>\r\n</p>',0,0,0,10,17),(23,'聊聊数据库~6.SQL运维中篇','聊聊数据库~6.SQL运维中篇文章汇总：https://www.cnblogs.com/dotnetcrazy/p/9160514.html目录：1.6.5.MySQL日志相关1.MySQL常用日志2.error_log（错误日志）3.ge...','2019-06-16 10:38:54.568796','<h1 class=\"postTitle\" style=\'font-size:21.6px;font-family:Consolas, 微软雅黑, \"background-color:#FFFFFF;\'>\r\n<a class=\"postTitle2\" href=\"https://www.cnblogs.com/dotnetcrazy/p/11029323.html\" id=\"cb_post_title_url\">聊聊数据库~6.SQL运维中篇</a>\r\n</h1>\r\n<div class=\"clear\" style=\'margin:0px;padding:0px;font-family:Consolas, 微软雅黑, \"background-color:#FFFFFF;\'>\r\n</div>\r\n<div class=\"postBody\" style=\'margin:0px;padding:0px;font-size:14px;font-family:Consolas, 微软雅黑, \"background-color:#FFFFFF;\'>\r\n<div class=\"blogpost-body cnblogs-markdown\" id=\"cnblogs_post_body\" style=\"margin:0px 0px 20px;padding:0px;\">\r\n<div class=\"cell border-box-sizing text_cell rendered\" style=\"margin:0px;padding:5px;background:linear-gradient(to right, transparent -40px, transparent 1px, transparent 1px, transparent 100%);\">\r\n<div class=\"prompt input_prompt\" style=\"margin:0px;padding:0px 0.4em;text-align:right;font-family:Consolas, 微软雅黑, monospace;color:#303F9F;\">\r\n</div>\r\n<div class=\"inner_cell\" style=\"margin:0px;padding:0px;\">\r\n<div class=\"text_cell_render border-box-sizing rendered_html\" style=\"margin:0px;padding:0.5em 0.5em 0.5em 0.4em;\">\r\n<p>\r\n<span style=\"font-weight:700;\">文章汇总：<a href=\"https://www.cnblogs.com/dotnetcrazy/p/9160514.html\" target=\"_blank\">https://www.cnblogs.com/dotnetcrazy/p/9160514.html</a></span>\r\n</p>\r\n<div id=\"navCategory\" style=\"margin:0px;padding:0px;\">\r\n<p>\r\n<span style=\"font-weight:700;\">目录：</span>\r\n</p>\r\n<ul>\r\n<li>\r\n<a href=\"https://www.cnblogs.com/dotnetcrazy/p/11029323.html#_map0\">1.6.5.MySQL日志相关</a>\r\n</li>\r\n<li>\r\n<a href=\"https://www.cnblogs.com/dotnetcrazy/p/11029323.html#_map1\">1.MySQL常用日志</a>\r\n</li>\r\n<li>\r\n<a href=\"https://www.cnblogs.com/dotnetcrazy/p/11029323.html#_map2\">2.error_log（错误日志）</a>\r\n</li>\r\n<li>\r\n<a href=\"https://www.cnblogs.com/dotnetcrazy/p/11029323.html#_map3\">3.general_log（常规日志）</a>\r\n</li>\r\n<li>\r\n<a href=\"https://www.cnblogs.com/dotnetcrazy/p/11029323.html#_map4\">4.slow_query_log（慢查询日志）</a>\r\n</li>\r\n<li>\r\n<a href=\"https://www.cnblogs.com/dotnetcrazy/p/11029323.html#_map5\">扩展：慢查询工具</a>\r\n</li>\r\n<li>\r\n<a href=\"https://www.cnblogs.com/dotnetcrazy/p/11029323.html#_map6\">5.binary_log（二进制日志）</a>\r\n</li>\r\n</ul>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n<p>\r\n			上篇回顾：<a class=\"uri\" href=\"https://www.cnblogs.com/dotnetcrazy/p/10810798.html#top\">https://www.cnblogs.com/dotnetcrazy/p/10810798.html#top</a>\r\n</p>\r\n<a name=\"_map0\"></a>\r\n<h3 id=\"mysql日志相关\" style=\"font-size:16px;color:#FFFFFF;background:#52B122;\">\r\n			1.6.5.MySQL日志相关\r\n		</h3>\r\n<p>\r\n			本文的测试环境：MySQL5.7.26、MariaDB5.5.60、MySQL8.0.16\r\n		</p>\r\n<blockquote style=\"font-size:inherit;color:#333333;\">\r\n<p>\r\n				PS：版本查询select version();\r\n			</p>\r\n</blockquote>\r\n<a name=\"_map1\"></a>\r\n<h4 id=\"mysql常用日志\" style=\"color:#333333;\">\r\n			1.MySQL常用日志\r\n		</h4>\r\n<p>\r\n			服务器层日志（存储引擎层有自己的日志）\r\n		</p>\r\n<table style=\"margin:0px;padding:0px;background-color:transparent;border:1px solid silver;\">\r\n<tbody>\r\n<tr class=\"header\">\r\n<th style=\"text-align:left;background-color:#FAFAFA;border:1px solid silver;\">\r\n						日志类型\r\n					</th>\r\n<th style=\"text-align:left;background-color:#FAFAFA;border:1px solid silver;\">\r\n						描述\r\n					</th>\r\n</tr>\r\n</tbody>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td style=\"border:1px solid silver;\">\r\n						error_log(错误日志)\r\n					</td>\r\n<td style=\"border:1px solid silver;\">\r\n						记录MySQL启动、运行或停止时出现的问题\r\n					</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"border:1px solid silver;\">\r\n						general_log(常规日志)\r\n					</td>\r\n<td style=\"border:1px solid silver;\">\r\n						记录所有发送给MySQL的请求（耗性能）\r\n					</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"border:1px solid silver;\">\r\n<span style=\"font-weight:700;\">slow_query_log</span>(慢查日志)\r\n					</td>\r\n<td style=\"border:1px solid silver;\">\r\n						记录符合条件的查询（eg：超过10s、没有使用索引等）\r\n					</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"border:1px solid silver;\">\r\n<span style=\"font-weight:700;\">binary_log</span>(二进制日志)\r\n					</td>\r\n<td style=\"border:1px solid silver;\">\r\n						记录全部有效的数据修改日志（老版本数据库不会开启）\r\n					</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"border:1px solid silver;\">\r\n						relay_log(中继日志)\r\n					</td>\r\n<td style=\"border:1px solid silver;\">\r\n						用于主从复制，临时存储主从同步的二进制日志（增量复制）\r\n					</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<p>\r\n			知识扩展：<a class=\"uri\" href=\"https://blog.csdn.net/zhang123456456/article/details/72811875\">https://blog.csdn.net/zhang123456456/article/details/72811875</a>\r\n</p>\r\n<p>\r\n<span style=\"font-weight:700;\">实时查看文件：tail -f /var/log/mysqld.log</span>\r\n</p>\r\n<blockquote style=\"font-size:inherit;color:#333333;\">\r\n<p>\r\n				tail -f 用于监视文件增长（默认是末尾10行）\r\n			</p>\r\n</blockquote>\r\n<a name=\"_map2\"></a>\r\n<h4 id=\"error_log错误日志\" style=\"color:#333333;\">\r\n			2.error_log（错误日志）\r\n		</h4>\r\n<p>\r\n			一般记录MySQL运行错误和和未授权的访问\r\n		</p>\r\n<blockquote style=\"font-size:inherit;color:#333333;\">\r\n<ul>\r\n<li>\r\n<span style=\"font-weight:700;\">老版：log_error + log_warnings</span>\r\n</li>\r\n<li>\r\n<span style=\"font-weight:700;\">常用：log_error + log_error_verbosity</span>\r\n</li>\r\n<li>\r\n					新版：log_error + log_error_verbosity + log_error_services\r\n				</li>\r\n</ul>\r\n</blockquote>\r\n<p>\r\n			查询MySQL配置：show variables like \'%log_error%\';\r\n		</p>\r\n<p>\r\n			SQL查询可以这么干：\r\n		</p>\r\n<pre class=\"sql\"><span class=\"hljs-comment\" style=\"color:green;\">-- Ubuntu下默认是：`/var/log/mysql/error.log`</span> <span class=\"hljs-comment\" style=\"color:green;\">-- CentOS下默认是：`/var/log/mysqld.log` | `/var/log/mariadb/mariadb.log`</span> <span class=\"hljs-keyword\" style=\"color:#0000FF;\">select</span> @@log_error; <span class=\"hljs-comment\" style=\"color:green;\">-- 尽可能和Data分开存储</span> <span class=\"hljs-comment\" style=\"color:green;\">-- 0：不记录警告信息，1：告警信息写入错误日志，2：各类告警信息都写入（eg:网络故障和重连信息）</span> <span class=\"hljs-keyword\" style=\"color:#0000FF;\">select</span> @@log_warnings; <span class=\"hljs-comment\" style=\"color:green;\">-- MySQL8中已经移除（MySQL5.7默认是2，MariaDB5.5.60默认是1）</span> <span class=\"hljs-comment\" style=\"color:green;\">-- 错误级别（1：Error，2：Error、Warning，3：Error、Warning、Info</span> <span class=\"hljs-keyword\" style=\"color:#0000FF;\">select</span> @@log_error_verbosity; <span class=\"hljs-comment\" style=\"color:green;\">-- MySQL8默认是2，MySQL5.7默认是3</span> <span class=\"hljs-comment\" style=\"color:green;\">-- PS：从MySQL 5.7.2开始，首选`log_error_verbosity`系统变量</span> <span class=\"hljs-comment\" style=\"color:green;\">-- 默认是`log_filter_internal; log_sink_internal`</span> <span class=\"hljs-keyword\" style=\"color:#0000FF;\">select</span> @@log_error_services; <span class=\"hljs-comment\" style=\"color:green;\">-- MySQL8.0中新增</span></pre>\r\n<p>\r\n			PS：其实MySQL在市面上有很多成熟解决方案（基本上都是基于5.6、5.7的）\r\n		</p>\r\n<blockquote style=\"font-size:inherit;color:#333333;\">\r\n<p>\r\n				这也是为什么我开篇主推MySQL5.7系列和MariaDB5.5.60（很多时候不是不用最新DB，而是架构依赖做不到啊）\r\n			</p>\r\n</blockquote>\r\n<p>\r\n			知识拓展：<a class=\"uri\" href=\"https://www.cnblogs.com/kerrycode/p/8973285.html\">https://www.cnblogs.com/kerrycode/p/8973285.html</a>\r\n</p>\r\n<h5 id=\"mysql8.0新增参数log_error_services\" style=\"font-size:12px;color:#333333;\">\r\n			MySQL8.0新增参数：log_error_services\r\n		</h5>\r\n<p>\r\n<span style=\"font-weight:700;\">日志服务组件</span>：\r\n		</p>\r\n<table style=\"margin:0px;padding:0px;background-color:transparent;border:1px solid silver;\">\r\n<tbody>\r\n<tr class=\"header\">\r\n<th style=\"text-align:left;background-color:#FAFAFA;border:1px solid silver;\">\r\n						日志服务组件名\r\n					</th>\r\n<th style=\"text-align:left;background-color:#FAFAFA;border:1px solid silver;\">\r\n						描述\r\n					</th>\r\n</tr>\r\n</tbody>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td style=\"border:1px solid silver;\">\r\n						log_sink_internal\r\n					</td>\r\n<td style=\"border:1px solid silver;\">\r\n						默认的日志输出组件（依赖log_error）\r\n					</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"border:1px solid silver;\">\r\n<span style=\"font-weight:700;\">log_filter_internal</span>\r\n</td>\r\n<td style=\"border:1px solid silver;\">\r\n						默认的日志过滤组件（依赖log_error_verbosity）\r\n					</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"border:1px solid silver;\">\r\n<span style=\"font-weight:700;\">log_sink_json</span>\r\n</td>\r\n<td style=\"border:1px solid silver;\">\r\n						将错误日志输出到json文件\r\n					</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"border:1px solid silver;\">\r\n						log_sink_syseventlog\r\n					</td>\r\n<td style=\"border:1px solid silver;\">\r\n						将错误日志输出到系统日志文件\r\n					</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<p>\r\n			PS：log_filter_internal：过滤错误信息（<span style=\"font-weight:700;\">达不到级别的不记录</span>）\r\n		</p>\r\n<p>\r\n<span style=\"font-weight:700;\">日记格式一般是这样的</span>：UTC时间戳 进程id [日志级别] [错误代码] [由什么产生的日志（Server or Client）] 详细信息\r\n		</p>\r\n<blockquote style=\"font-size:inherit;color:#333333;\">\r\n<p>\r\n				eg：2019-05-19T09:54:11.590474Z 8 [Warning] [MY-010055] [Server] IP address \'192.168.36.144\' could not be resolved: Name or service not known\r\n			</p>\r\n</blockquote>\r\n<p>\r\n<span style=\"font-weight:700;\">一般log_sink_json用的比较多</span>：\r\n		</p>\r\n<blockquote style=\"font-size:inherit;color:#333333;\">\r\n<p>\r\n				官方文档参考：<a class=\"uri\" href=\"https://dev.mysql.com/doc/refman/8.0/en/error-log-json.html\">https://dev.mysql.com/doc/refman/8.0/en/error-log-json.html</a>\r\n</p>\r\n</blockquote>\r\n<p>\r\n			PS：第一次使用需要安装一下json组件：install component \'file://component_log_sink_json\';\r\n		</p>\r\n<blockquote style=\"font-size:inherit;color:#333333;\">\r\n<p>\r\n<span style=\"font-weight:700;\">常用设置：set persist log_error_services=\'log_filter_internal;log_sink_json\';</span>\r\n</p>\r\n</blockquote>\r\n<h5 id=\"时间戳相关的小知识点\" style=\"font-size:12px;color:#333333;\">\r\n			时间戳相关的小知识点\r\n		</h5>\r\n<p>\r\n			上面的时间默认是UTC的时间戳，和我们是有时差的，这个时间戳可以通过设置log_timestamps来本地化：\r\n		</p>\r\n<pre class=\"sql\"><span class=\"hljs-comment\" style=\"color:green;\">-- 查询</span> <span class=\"hljs-keyword\" style=\"color:#0000FF;\">select</span> @@log_timestamps; <span class=\"hljs-comment\" style=\"color:green;\">-- MySQL5.7新增</span> <span class=\"hljs-comment\" style=\"color:green;\">-- 从8开始,可通过SET PERSIST命令将全局变量的修改持久化到配置文件中</span> <span class=\"hljs-keyword\" style=\"color:#0000FF;\">set</span> persist log_timestamps=<span class=\"hljs-string\" style=\"color:#A31515;\">\'SYSTEM\'</span>; <span class=\"hljs-comment\" style=\"color:green;\">-- 需要root权限</span></pre>\r\n<p>\r\n<span style=\"font-weight:700;\">PS：set persist生成的配置文件路径在：/var/lib/mysql/mysqld-auto.cnf</span>\r\n</p>\r\n<a name=\"_map3\"></a>\r\n<h4 id=\"general_log常规日志\" style=\"color:#333333;\">\r\n			3.general_log（常规日志）\r\n		</h4>\r\n<p>\r\n			以前开发调试的时候基本上都是会开启的，上线后关闭（系统V1初期的时候也会开启一段时间）\r\n		</p>\r\n<blockquote style=\"font-size:inherit;color:#333333;\">\r\n<p>\r\n<span style=\"font-weight:700;\">现在开发可以使用<a href=\"https://www.cnblogs.com/dotnetcrazy/p/10443522.html\">go-sniffer</a>来抓包查看客户端执行的SQL</span>\r\n</p>\r\n</blockquote>\r\n<pre class=\"sql\"><span class=\"hljs-comment\" style=\"color:green;\">-- 是否打开常规日志（0不打开，1打开）</span> <span class=\"hljs-comment\" style=\"color:green;\">-- 一般不打开（性能）</span> <span class=\"hljs-keyword\" style=\"color:#0000FF;\">select</span> @@general_log; <span class=\"hljs-comment\" style=\"color:green;\">-- 默认为0</span> <span class=\"hljs-comment\" style=\"color:green;\">-- Ubuntu默认：/var/lib/mysql/ubuntuserver.log</span> <span class=\"hljs-comment\" style=\"color:green;\">-- CentOS默认：/var/lib/mysql/localhost.log</span> <span class=\"hljs-keyword\" style=\"color:#0000FF;\">select</span> @@general_log_file; <span class=\"hljs-comment\" style=\"color:green;\">-- 常规日志的路径</span> <span class=\"hljs-comment\" style=\"color:green;\">-- 日志的存储方式（FILE | TABLE | NONE）</span> <span class=\"hljs-keyword\" style=\"color:#0000FF;\">select</span> @@log_output; <span class=\"hljs-comment\" style=\"color:green;\">-- 默认是文件存储</span></pre>\r\n<p>\r\n			简单看一下常规日志在数据库中的结构：\r\n		</p>\r\n<p>\r\n<img alt=\"2.常规日志.png\" src=\"https://img2018.cnblogs.com/blog/1127869/201905/1127869-20190522182213738-70856259.png\" style=\"height:auto;\"/>\r\n</p>\r\n<p>\r\n<span style=\"font-weight:700;\">临时开启参考</span>：\r\n		</p>\r\n<pre class=\"shell\"><span class=\"hljs-meta\" style=\"color:#2B91AF;\">#</span><span class=\"bash\"> 开启</span> set global general_log = 1; <span class=\"hljs-meta\" style=\"color:#2B91AF;\"> #</span><span class=\"bash\"> <span class=\"hljs-built_in\" style=\"color:#0000FF;\">set</span> [global | persist] general_log_file = <span class=\"hljs-string\" style=\"color:#A31515;\">\'日志路径\'</span>;</span> set global log_output = \'TABLE\';</pre>\r\n<a name=\"_map4\"></a>\r\n<h4 id=\"slow_query_log慢查询日志\" style=\"color:#333333;\">\r\n			4.slow_query_log（慢查询日志）\r\n		</h4>\r\n<p>\r\n			这个是最常用的，把符合条件的查询语句记录在日志中，<span style=\"font-weight:700;\">一般都是些需要优化的SQL</span>\r\n</p>\r\n<blockquote style=\"font-size:inherit;color:#333333;\">\r\n<p>\r\n				PS：出现性能瓶颈的时候，或者为了优化SQL会开启一段时间（小项目推荐直接开启）\r\n			</p>\r\n</blockquote>\r\n<p>\r\n			先看下默认值：<span style=\"font-weight:700;\">show variables like \'%slow%\';、show variables like \'long%\';</span>\r\n</p>\r\n<p>\r\n<img alt=\"2.慢查询.png\" src=\"https://img2018.cnblogs.com/blog/1127869/201905/1127869-20190522192146261-1133467961.png\" style=\"height:auto;\"/>\r\n</p>\r\n<p>\r\n<span style=\"font-weight:700;\">SQL查询</span>：\r\n		</p>\r\n<pre class=\"sql\"><span class=\"hljs-comment\" style=\"color:green;\">-- 是否开启</span> <span class=\"hljs-keyword\" style=\"color:#0000FF;\">select</span> @@slow_query_log; <span class=\"hljs-comment\" style=\"color:green;\">-- 默认是关闭</span> <span class=\"hljs-comment\" style=\"color:green;\">-- CentOS：/var/lib/mysql/localhost-slow.log</span> <span class=\"hljs-comment\" style=\"color:green;\">-- Ubuntu：/var/lib/mysql/ubuntuserver-slow.log</span> <span class=\"hljs-keyword\" style=\"color:#0000FF;\">select</span> @@slow_query_log_file; <span class=\"hljs-comment\" style=\"color:green;\">-- 条件：设置超过多少秒为慢查询（一般设置1s）</span> <span class=\"hljs-keyword\" style=\"color:#0000FF;\">select</span> @@long_query_time; <span class=\"hljs-comment\" style=\"color:green;\">-- 默认是10s（支持小数：0.003)</span> <span class=\"hljs-comment\" style=\"color:green;\">-- PS：设置为0就会记录所有SQL（不推荐这么干）</span> <span class=\"hljs-comment\" style=\"color:green;\">-- 条件：没有使用索引的查询记录到日志中</span> <span class=\"hljs-keyword\" style=\"color:#0000FF;\">select</span> @@log_queries_not_using_indexes; <span class=\"hljs-comment\" style=\"color:green;\">-- 默认是0（不开启）</span> <span class=\"hljs-comment\" style=\"color:green;\">-- 记录optimize table、analyze table和alter table的管理语句</span> <span class=\"hljs-keyword\" style=\"color:#0000FF;\">select</span> @@log_slow_admin_statements; <span class=\"hljs-comment\" style=\"color:green;\">-- 默认是0（不开启）</span> <span class=\"hljs-comment\" style=\"color:green;\">-- 记录由Slave所产生的慢查询</span> <span class=\"hljs-keyword\" style=\"color:#0000FF;\">select</span> @@log_slow_slave_statements;</pre>\r\n<p>\r\n<span style=\"font-weight:700;\">常用设置</span>：\r\n		</p>\r\n<blockquote style=\"font-size:inherit;color:#333333;\">\r\n<p>\r\n				PS：高并发下的互联网项目，对SQL执行时间的容忍度一般都是<span style=\"font-weight:700;\">低于300~500ms</span>的（long_query_time=0.05）\r\n			</p>\r\n</blockquote>\r\n<pre class=\"shell\"><span class=\"hljs-meta\" style=\"color:#2B91AF;\">#</span><span class=\"bash\"> 常用如下：（需要MySQL的root权限）</span> set global slow_query_log = 1; # 开启慢查询日志\r\nset global long_query_time = 1; # 记录大于1s的SQL\r\nset global log_slow_admin_statements = 1; # 记录管理语句\r\nset global log_queries_not_using_indexes = 1; # 记录没有使用索引的SQL <span class=\"hljs-meta\" style=\"color:#2B91AF;\">#</span><span class=\"bash\"> <span class=\"hljs-built_in\" style=\"color:#0000FF;\">set</span> [global | persist] slow_query_log_file = <span class=\"hljs-string\" style=\"color:#A31515;\">\'路径\'</span>; <span class=\"hljs-comment\" style=\"color:green;\"># 设置log路径</span></span></pre>\r\n<p>\r\n<span style=\"font-weight:700;\">设置long_query_time时，需要重新连接才能生效（不需要重启DB）</span>\r\n</p>\r\n<blockquote style=\"font-size:inherit;color:#333333;\">\r\n<p>\r\n				PS：当前会话不生效，之后的会话就生效了（不想重连可以再设置下当前会话的long_query_time）\r\n			</p>\r\n</blockquote>\r\n<p>\r\n			知识拓展：（chown mysql:mysql /work/log/xxx.log）\r\n		</p>\r\n<ul>\r\n<li>\r\n<a class=\"uri\" href=\"https://shihlei.iteye.com/blog/2311752\">https://shihlei.iteye.com/blog/2311752</a>\r\n</li>\r\n<li>\r\n<a class=\"uri\" href=\"https://www.cnblogs.com/1021lynn/p/5328495.html\">https://www.cnblogs.com/1021lynn/p/5328495.html</a>\r\n</li>\r\n</ul>\r\n<a name=\"_map5\"></a>\r\n<h4 id=\"扩展慢查询工具\" style=\"color:#333333;\">\r\n			扩展：慢查询工具\r\n		</h4>\r\n<p>\r\n			先简单分析下慢查询日志：\r\n		</p>\r\n<pre class=\"shell\"><span class=\"hljs-meta\" style=\"color:#2B91AF;\">#</span><span class=\"bash\"> Time: 2019-05-22T21:16:28.759491+08:00</span> <span class=\"hljs-meta\" style=\"color:#2B91AF;\">#</span><span class=\"bash\"> User@Host: root[root] @ localhost []  Id:    11</span> <span class=\"hljs-meta\" style=\"color:#2B91AF;\">#</span><span class=\"bash\"> Query_time: 0.000818  Lock_time: 0.000449 Rows_sent: 5  Rows_examined: 5</span> SET timestamp=1558530988;\r\nselect * from mysql.user order by host; # SQL语句</pre>\r\n<ol>\r\n<li>\r\n				Time：查询的<span style=\"font-weight:700;\">执行时间</span>（start_time）\r\n			</li>\r\n<li>\r\n				User@Host: root[root] @ localhost []  Id:11：执行 sql 的<span style=\"font-weight:700;\">主机信息</span>\r\n</li>\r\n<li>\r\n				Query_time：SQL<span style=\"font-weight:700;\">查询</span>所<span style=\"font-weight:700;\">耗</span>的<span style=\"font-weight:700;\">时</span>间\r\n			</li>\r\n<li>\r\n				Lock_time：<span style=\"font-weight:700;\">锁定时间</span>\r\n</li>\r\n<li>\r\n				Rows_sent：所<span style=\"font-weight:700;\">发送的行数</span>\r\n</li>\r\n<li>\r\n				Rows_examined：<span style=\"font-weight:700;\">锁扫描的行数</span>\r\n</li>\r\n<li>\r\n				SET timestamp=1558530988;：SQL<span style=\"font-weight:700;\">执行时间</span>\r\n</li>\r\n</ol>\r\n<p>\r\n			现在可以说说工具了，推荐两款：\r\n		</p>\r\n<ol>\r\n<li>\r\n				自带的慢日志分析工具：mysqldumpslow\r\n			</li>\r\n<li>\r\n				MySQL工具箱（percona-toolkit）中的pt-query-digest\r\n			</li>\r\n</ol>\r\n<h5 id=\"mysqldumpslow精简\" style=\"font-size:12px;color:#333333;\">\r\n			mysqldumpslow（精简）\r\n		</h5>\r\n<p>\r\n<span style=\"font-weight:700;\">查询最慢的10条SQL：mysqldumpslow -s t -t 10 /var/lib/mysql/localhost-slow.log</span>\r\n</p>\r\n<pre class=\"shell\">-s 按照那种方式排序\r\n    t: 查询时间\r\n    c：访问计数\r\n    l：锁定时间\r\n    r:返回记录\r\n    al：平均锁定时间\r\n    ar：平均访问记录数\r\n    at：平均查询时间\r\n-t 返回多少条数据（可以理解为top n）\r\n-g 可以跟上正则匹配模式，大小写不敏感。</pre>\r\n<p>\r\n			PS：使用mysqldumpslow的分析结果不会显示具体完整的sql语句：\r\n		</p>\r\n<ol>\r\n<li>\r\n<span style=\"font-weight:700;\">翻页sql不一样，性能也是不一样的，越往后的页数越容易出现慢查询，而mysqldumpslow把所有翻页sql当成一个sql了</span>\r\n</li>\r\n<li>\r\n				eg：select * from tb_table where uid=20 group by createtime limit 10000, 1000; ==&gt; select * from tb_table where uid=N group by createtime limit N, N;\r\n				<ul>\r\n<li>\r\n						不管你uid和limit怎么变，mysqldumpslow认为是一样的\r\n					</li>\r\n</ul>\r\n</li>\r\n</ol>\r\n<h5 id=\"pt-query-digest推荐\" style=\"font-size:12px;color:#333333;\">\r\n			pt-query-digest（推荐）\r\n		</h5>\r\n<p>\r\n			官方文档：<a class=\"uri\" href=\"https://www.percona.com/doc/percona-toolkit/3.0/pt-query-digest.html\">https://www.percona.com/doc/percona-toolkit/3.0/pt-query-digest.html</a>\r\n</p>\r\n<blockquote style=\"font-size:inherit;color:#333333;\">\r\n<p>\r\n<span style=\"font-weight:700;\">分析慢查询日志：pt-query-digest /var/lib/mysql/localhost-slow.log</span>\r\n</p>\r\n</blockquote>\r\n<ol>\r\n<li>\r\n				使用tcppdump捕获MySQL协议数据，然后报告最慢的查询：\r\n				<ul>\r\n<li>\r\n						tcpdump -s 65535 -x -nn -q -tttt -i any -c 1000 port 3306 &gt; mysql.tcp.txt\r\n					</li>\r\n<li>\r\n						pt-query-digest --type tcpdump mysql.tcp.txt\r\n					</li>\r\n</ul>\r\n</li>\r\n<li>\r\n				查看来自远程进程列表上最慢的查询：\r\n				<ul>\r\n<li>\r\n						pt-query-digest --processlist h=ip\r\n					</li>\r\n</ul>\r\n</li>\r\n</ol>\r\n<p>\r\n			安装可以参考：<a href=\"https://github.com/lotapp/awesome-tools/blob/master/README.md#4%E8%BF%90%E7%BB%B4\">https://github.com/lotapp/awesome-tools/blob/master/README.md#4%E8%BF%90%E7%BB%B4</a>\r\n</p>\r\n<blockquote style=\"font-size:inherit;color:#333333;\">\r\n<p>\r\n				PS：percona-toolkit的常用工具我也在里面简单说了下，对应文档也贴了\r\n			</p>\r\n</blockquote>\r\n<h5 id=\"other\" style=\"font-size:12px;color:#333333;\">\r\n			other\r\n		</h5>\r\n<p>\r\n			PS：还有一款<span style=\"font-weight:700;\">mysqlsla</span>我没用过，所以贴个参考文章，感兴趣的同志自己研究下\r\n		</p>\r\n<blockquote style=\"font-size:inherit;color:#333333;\">\r\n<p>\r\n<a class=\"uri\" href=\"https://www.cnblogs.com/fengchi/p/6187099.html\">https://www.cnblogs.com/fengchi/p/6187099.html</a>\r\n</p>\r\n</blockquote>\r\n<p>\r\n			知识拓展：<a class=\"uri\" href=\"https://www.cnblogs.com/fengchi/p/6187099.html\">https://www.cnblogs.com/fengchi/p/6187099.html</a>\r\n</p>\r\n</div>\r\n</div>',0,0,0,9,18);
/*!40000 ALTER TABLE `blog_article` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `blog_article2tag`
--

DROP TABLE IF EXISTS `blog_article2tag`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
 SET character_set_client = utf8mb4 ;
CREATE TABLE `blog_article2tag` (
  `nid` int(11) NOT NULL AUTO_INCREMENT,
  `article_id` int(11) NOT NULL,
  `tag_id` int(11) NOT NULL,
  PRIMARY KEY (`nid`),
  UNIQUE KEY `blog_article2tag_article_id_tag_id_b0745f42_uniq` (`article_id`,`tag_id`),
  KEY `blog_article2tag_tag_id_389b9a96_fk_blog_tag_nid` (`tag_id`),
  CONSTRAINT `blog_article2tag_article_id_753a2b60_fk_blog_article_nid` FOREIGN KEY (`article_id`) REFERENCES `blog_article` (`nid`),
  CONSTRAINT `blog_article2tag_tag_id_389b9a96_fk_blog_tag_nid` FOREIGN KEY (`tag_id`) REFERENCES `blog_tag` (`nid`)
) ENGINE=InnoDB AUTO_INCREMENT=20 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `blog_article2tag`
--

LOCK TABLES `blog_article2tag` WRITE;
/*!40000 ALTER TABLE `blog_article2tag` DISABLE KEYS */;
INSERT INTO `blog_article2tag` VALUES (1,1,1),(2,2,2),(3,2,3),(4,3,4),(5,3,5),(8,4,7),(7,5,6),(6,6,8),(12,12,9),(10,14,9),(11,15,9),(9,16,10),(13,17,11),(18,18,11),(17,19,11),(16,20,11),(15,21,11),(14,22,11),(19,23,12);
/*!40000 ALTER TABLE `blog_article2tag` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `blog_articleupdown`
--

DROP TABLE IF EXISTS `blog_articleupdown`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
 SET character_set_client = utf8mb4 ;
CREATE TABLE `blog_articleupdown` (
  `nid` int(11) NOT NULL AUTO_INCREMENT,
  `is_up` tinyint(1) NOT NULL,
  `article_id` int(11) DEFAULT NULL,
  `user_id` int(11) DEFAULT NULL,
  PRIMARY KEY (`nid`),
  UNIQUE KEY `blog_articleupdown_article_id_user_id_fa3d0c08_uniq` (`article_id`,`user_id`),
  KEY `blog_articleupdown_user_id_2c0ebe49_fk_blog_userinfo_nid` (`user_id`),
  CONSTRAINT `blog_articleupdown_article_id_9be1a8a2_fk_blog_article_nid` FOREIGN KEY (`article_id`) REFERENCES `blog_article` (`nid`),
  CONSTRAINT `blog_articleupdown_user_id_2c0ebe49_fk_blog_userinfo_nid` FOREIGN KEY (`user_id`) REFERENCES `blog_userinfo` (`nid`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `blog_articleupdown`
--

LOCK TABLES `blog_articleupdown` WRITE;
/*!40000 ALTER TABLE `blog_articleupdown` DISABLE KEYS */;
INSERT INTO `blog_articleupdown` VALUES (1,1,4,9),(2,1,4,8);
/*!40000 ALTER TABLE `blog_articleupdown` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `blog_blog`
--

DROP TABLE IF EXISTS `blog_blog`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
 SET character_set_client = utf8mb4 ;
CREATE TABLE `blog_blog` (
  `nid` int(11) NOT NULL AUTO_INCREMENT,
  `title` varchar(64) NOT NULL,
  `site_name` varchar(64) NOT NULL,
  `theme` varchar(32) NOT NULL,
  PRIMARY KEY (`nid`)
) ENGINE=InnoDB AUTO_INCREMENT=19 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `blog_blog`
--

LOCK TABLES `blog_blog` WRITE;
/*!40000 ALTER TABLE `blog_blog` DISABLE KEYS */;
INSERT INTO `blog_blog` VALUES (1,'hardy9sap的个人博客','hardy9sap','hardy9sap.css'),(2,'金角大王','alex','alex.css'),(3,'林海峰的个人博客','egon','egon.css'),(4,'覃东宇的个人博客','qdyy','qdyy.css'),(16,'newAlex的个人博客','newAlex','newAlex.css'),(17,'blex的个人博客','blex','blex.css'),(18,'clex的个人博客','clex','clex.css');
/*!40000 ALTER TABLE `blog_blog` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `blog_category`
--

DROP TABLE IF EXISTS `blog_category`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
 SET character_set_client = utf8mb4 ;
CREATE TABLE `blog_category` (
  `nid` int(11) NOT NULL AUTO_INCREMENT,
  `title` varchar(32) NOT NULL,
  `blog_id` int(11) NOT NULL,
  PRIMARY KEY (`nid`),
  KEY `blog_category_blog_id_80f0723a_fk_blog_blog_nid` (`blog_id`),
  CONSTRAINT `blog_category_blog_id_80f0723a_fk_blog_blog_nid` FOREIGN KEY (`blog_id`) REFERENCES `blog_blog` (`nid`)
) ENGINE=InnoDB AUTO_INCREMENT=11 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `blog_category`
--

LOCK TABLES `blog_category` WRITE;
/*!40000 ALTER TABLE `blog_category` DISABLE KEYS */;
INSERT INTO `blog_category` VALUES (1,'Markdown',1),(2,'前端',2),(3,'egon的前端',3),(4,'数据库',4),(5,'Web前端',4),(6,'Docker',4),(7,'经验分享',4),(8,'Python',16),(9,'运维数据库',18),(10,'Git',17);
/*!40000 ALTER TABLE `blog_category` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `blog_comment`
--

DROP TABLE IF EXISTS `blog_comment`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
 SET character_set_client = utf8mb4 ;
CREATE TABLE `blog_comment` (
  `nid` int(11) NOT NULL AUTO_INCREMENT,
  `content` varchar(255) NOT NULL,
  `create_time` datetime(6) NOT NULL,
  `article_id` int(11) NOT NULL,
  `parent_comment_id` int(11) DEFAULT NULL,
  `user_id` int(11) NOT NULL,
  PRIMARY KEY (`nid`),
  KEY `blog_comment_article_id_3d58bca6_fk_blog_article_nid` (`article_id`),
  KEY `blog_comment_parent_comment_id_26791b9a_fk_blog_comment_nid` (`parent_comment_id`),
  KEY `blog_comment_user_id_59a54155_fk_blog_userinfo_nid` (`user_id`),
  CONSTRAINT `blog_comment_article_id_3d58bca6_fk_blog_article_nid` FOREIGN KEY (`article_id`) REFERENCES `blog_article` (`nid`),
  CONSTRAINT `blog_comment_parent_comment_id_26791b9a_fk_blog_comment_nid` FOREIGN KEY (`parent_comment_id`) REFERENCES `blog_comment` (`nid`),
  CONSTRAINT `blog_comment_user_id_59a54155_fk_blog_userinfo_nid` FOREIGN KEY (`user_id`) REFERENCES `blog_userinfo` (`nid`)
) ENGINE=InnoDB AUTO_INCREMENT=53 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `blog_comment`
--

LOCK TABLES `blog_comment` WRITE;
/*!40000 ALTER TABLE `blog_comment` DISABLE KEYS */;
INSERT INTO `blog_comment` VALUES (52,'写的不错啊','2019-06-15 13:39:08.809215',4,NULL,9);
/*!40000 ALTER TABLE `blog_comment` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `blog_tag`
--

DROP TABLE IF EXISTS `blog_tag`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
 SET character_set_client = utf8mb4 ;
CREATE TABLE `blog_tag` (
  `nid` int(11) NOT NULL AUTO_INCREMENT,
  `title` varchar(32) NOT NULL,
  `blog_id` int(11) NOT NULL,
  PRIMARY KEY (`nid`),
  KEY `blog_tag_blog_id_a8c60c42_fk_blog_blog_nid` (`blog_id`),
  CONSTRAINT `blog_tag_blog_id_a8c60c42_fk_blog_blog_nid` FOREIGN KEY (`blog_id`) REFERENCES `blog_blog` (`nid`)
) ENGINE=InnoDB AUTO_INCREMENT=13 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `blog_tag`
--

LOCK TABLES `blog_tag` WRITE;
/*!40000 ALTER TABLE `blog_tag` DISABLE KEYS */;
INSERT INTO `blog_tag` VALUES (1,'markdown',1),(2,'vue',2),(3,'前端',2),(4,'js',3),(5,'前端',3),(6,'Web',4),(7,'mysql',4),(8,'docker',4),(9,'Python开发',16),(10,'计算机知识',16),(11,'git',17),(12,'运维数据库',18);
/*!40000 ALTER TABLE `blog_tag` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `blog_userinfo`
--

DROP TABLE IF EXISTS `blog_userinfo`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
 SET character_set_client = utf8mb4 ;
CREATE TABLE `blog_userinfo` (
  `password` varchar(128) NOT NULL,
  `last_login` datetime(6) DEFAULT NULL,
  `is_superuser` tinyint(1) NOT NULL,
  `username` varchar(150) NOT NULL,
  `first_name` varchar(30) NOT NULL,
  `last_name` varchar(150) NOT NULL,
  `email` varchar(254) NOT NULL,
  `is_staff` tinyint(1) NOT NULL,
  `is_active` tinyint(1) NOT NULL,
  `date_joined` datetime(6) NOT NULL,
  `nid` int(11) NOT NULL AUTO_INCREMENT,
  `telephone` varchar(11) DEFAULT NULL,
  `avatar` varchar(100) NOT NULL,
  `create_time` datetime(6) NOT NULL,
  `blog_id` int(11) DEFAULT NULL,
  PRIMARY KEY (`nid`),
  UNIQUE KEY `username` (`username`),
  UNIQUE KEY `blog_id` (`blog_id`),
  UNIQUE KEY `telephone` (`telephone`),
  CONSTRAINT `blog_userinfo_blog_id_aa34488f_fk_blog_blog_nid` FOREIGN KEY (`blog_id`) REFERENCES `blog_blog` (`nid`)
) ENGINE=InnoDB AUTO_INCREMENT=19 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `blog_userinfo`
--

LOCK TABLES `blog_userinfo` WRITE;
/*!40000 ALTER TABLE `blog_userinfo` DISABLE KEYS */;
INSERT INTO `blog_userinfo` VALUES ('pbkdf2_sha256$150000$ZmSGcIZfkpq0$w7PKUjAtjrvrMSvgq+gtYlQpIXo4FzggNjqZVlaIcfQ=',NULL,1,'hardy9sap','','','hardy9sap@163.com',1,1,'2019-06-07 04:15:00.000000',1,'66699977700','avatars/default.png','2019-06-07 04:15:37.517372',1),('pbkdf2_sha256$150000$iDWPonvitymd$vYXbfKGvVmaJESrqPIaMhhql/iCXMcnIL5gUFYGUgKU=',NULL,0,'qindongyu','','','1361722162@qq.com',0,1,'2019-06-10 07:38:32.075478',2,'15973676972','avatars/pic3.jpg','2019-06-10 07:38:32.619161',NULL),('pbkdf2_sha256$150000$fMTqfXErWADv$A9lnNW3BNWyE83XClFOUjYz71lL4MNjqoSO1XFccNKo=',NULL,0,'alex','','','123123123@163.com',0,1,'2019-06-10 07:45:00.000000',3,'12345678900','avatars/default.png','2019-06-10 07:45:05.714511',2),('pbkdf2_sha256$150000$TeGNY05EzEW8$+Rpfo2g5jX6+Ck6II+y7rLEj/OwI0Dp4FXNxIPK7p8Y=',NULL,0,'egon','','','egon123@163.com',0,1,'2019-06-10 07:46:00.000000',4,'12312312300','avatars/pic3_EUTccaU.jpg','2019-06-10 07:46:29.402500',3),('pbkdf2_sha256$150000$eBh0nTFdaAEu$zosZcfy9sSgx6L2V0Jicf9VyHBVbLxE6Qc8kPklHrQI=',NULL,0,'eva-j','','','eva123@qq.com',0,1,'2019-06-10 07:49:41.762565',5,'12345678996','avatars/pic3_oy9A5Zk.jpg','2019-06-10 07:49:42.047382',NULL),('pbkdf2_sha256$150000$qky2xGQeFGHv$Tg/B/hFg2rqQfir3BLIMLur3ioQYzJMDGq/fhQTIJS8=',NULL,0,'peiqi','','','peiqi123@qq.com',0,1,'2019-06-10 09:39:19.477728',6,'78978978900','avatars/pic3_xXKSOcC.jpg','2019-06-10 09:39:19.770119',NULL),('pbkdf2_sha256$150000$92wVZJLTXcDV$sxsQhUfbIvR6rIqJ58pBd40Vu57ktgs9pjNM/x8kWPc=','2019-06-12 00:13:14.791840',0,'test','','','test@qq.com',0,1,'2019-06-12 00:08:17.348154',7,'74185296300','avatars/pic2.jpg','2019-06-12 00:08:17.684928',NULL),('pbkdf2_sha256$150000$924rLSR1BPCr$/VGOB/AgMP+0g8nuuGMo6y/HidloBhJo84aWtK3O8ls=','2019-06-16 10:39:26.547548',1,'administrator','','','admin123@163.com',1,1,'2019-06-12 00:27:40.098747',8,NULL,'avatars/default.png','2019-06-12 00:27:40.560481',NULL),('pbkdf2_sha256$150000$Gl908TBDlZK8$swDsxZQo26cU4K1u790Fp9AQtpv1w+SHIHKGeriyqUs=','2019-06-16 09:48:05.322371',0,'qdyy','','','1@qq.com',0,1,'2019-06-12 13:39:00.000000',9,'95175396300','avatars/pic2_hRIUAvZ.jpg','2019-06-12 13:39:38.504509',4),('pbkdf2_sha256$150000$aqz8mquTpA2C$aCiNpgjOkDHQYuh0wCmbWSs5VUlWqYL+3TT+O3Jwy8I=','2019-06-16 10:30:23.143678',0,'newAlex','','','newAlex@163.com',0,1,'2019-06-16 10:07:49.317857',16,'10293847560','avatars/lufei.jpeg','2019-06-16 10:07:49.614688',16),('pbkdf2_sha256$150000$Qa3sWDFY9Nvb$S3SvNDPpbZQXbAahHUAljtWHZPIvl1H4Z9zQC8WHsoU=','2019-06-16 10:43:33.872639',0,'blex','','','blex@163.com',0,1,'2019-06-16 10:31:55.716252',17,'01928374651','avatars/luobin.jpg','2019-06-16 10:31:56.611750',17),('pbkdf2_sha256$150000$AyKlWUMwadOd$YXDTNbR/jtg+v1ldcztnHvd9xwmhApOnd5qW7u1Dn7I=','2019-06-16 10:38:01.391136',0,'clex','','','clex@qq.com',0,1,'2019-06-16 10:37:46.950378',18,'54321678900','avatars/xiangkesi.png','2019-06-16 10:37:47.419107',18);
/*!40000 ALTER TABLE `blog_userinfo` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `blog_userinfo_groups`
--

DROP TABLE IF EXISTS `blog_userinfo_groups`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
 SET character_set_client = utf8mb4 ;
CREATE TABLE `blog_userinfo_groups` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `userinfo_id` int(11) NOT NULL,
  `group_id` int(11) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `blog_userinfo_groups_userinfo_id_group_id_5f60ecec_uniq` (`userinfo_id`,`group_id`),
  KEY `blog_userinfo_groups_group_id_1fb5e93a_fk_auth_group_id` (`group_id`),
  CONSTRAINT `blog_userinfo_groups_group_id_1fb5e93a_fk_auth_group_id` FOREIGN KEY (`group_id`) REFERENCES `auth_group` (`id`),
  CONSTRAINT `blog_userinfo_groups_userinfo_id_f6f0498b_fk_blog_userinfo_nid` FOREIGN KEY (`userinfo_id`) REFERENCES `blog_userinfo` (`nid`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `blog_userinfo_groups`
--

LOCK TABLES `blog_userinfo_groups` WRITE;
/*!40000 ALTER TABLE `blog_userinfo_groups` DISABLE KEYS */;
/*!40000 ALTER TABLE `blog_userinfo_groups` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `blog_userinfo_user_permissions`
--

DROP TABLE IF EXISTS `blog_userinfo_user_permissions`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
 SET character_set_client = utf8mb4 ;
CREATE TABLE `blog_userinfo_user_permissions` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `userinfo_id` int(11) NOT NULL,
  `permission_id` int(11) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `blog_userinfo_user_permi_userinfo_id_permission_i_7d343093_uniq` (`userinfo_id`,`permission_id`),
  KEY `blog_userinfo_user_p_permission_id_ace80f7e_fk_auth_perm` (`permission_id`),
  CONSTRAINT `blog_userinfo_user_p_permission_id_ace80f7e_fk_auth_perm` FOREIGN KEY (`permission_id`) REFERENCES `auth_permission` (`id`),
  CONSTRAINT `blog_userinfo_user_p_userinfo_id_57e76697_fk_blog_user` FOREIGN KEY (`userinfo_id`) REFERENCES `blog_userinfo` (`nid`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `blog_userinfo_user_permissions`
--

LOCK TABLES `blog_userinfo_user_permissions` WRITE;
/*!40000 ALTER TABLE `blog_userinfo_user_permissions` DISABLE KEYS */;
/*!40000 ALTER TABLE `blog_userinfo_user_permissions` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `django_admin_log`
--

DROP TABLE IF EXISTS `django_admin_log`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
 SET character_set_client = utf8mb4 ;
CREATE TABLE `django_admin_log` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `action_time` datetime(6) NOT NULL,
  `object_id` longtext,
  `object_repr` varchar(200) NOT NULL,
  `action_flag` smallint(5) unsigned NOT NULL,
  `change_message` longtext NOT NULL,
  `content_type_id` int(11) DEFAULT NULL,
  `user_id` int(11) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `django_admin_log_content_type_id_c4bce8eb_fk_django_co` (`content_type_id`),
  KEY `django_admin_log_user_id_c564eba6_fk_blog_userinfo_nid` (`user_id`),
  CONSTRAINT `django_admin_log_content_type_id_c4bce8eb_fk_django_co` FOREIGN KEY (`content_type_id`) REFERENCES `django_content_type` (`id`),
  CONSTRAINT `django_admin_log_user_id_c564eba6_fk_blog_userinfo_nid` FOREIGN KEY (`user_id`) REFERENCES `blog_userinfo` (`nid`)
) ENGINE=InnoDB AUTO_INCREMENT=79 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `django_admin_log`
--

LOCK TABLES `django_admin_log` WRITE;
/*!40000 ALTER TABLE `django_admin_log` DISABLE KEYS */;
INSERT INTO `django_admin_log` VALUES (1,'2019-06-12 00:52:04.268017','1','hardy9sap的个人博客',1,'[{\"added\": {}}]',8,8),(2,'2019-06-12 00:52:45.098680','2','金角大王',1,'[{\"added\": {}}]',8,8),(3,'2019-06-12 00:52:47.846497','2','金角大王',2,'[]',8,8),(4,'2019-06-12 00:53:02.938885','3','林海峰的个人博客',1,'[{\"added\": {}}]',8,8),(5,'2019-06-12 00:54:06.242581','1','hardy9sap',2,'[{\"changed\": {\"fields\": [\"telephone\", \"blog\"]}}]',6,8),(6,'2019-06-12 00:54:15.827483','3','alex',2,'[{\"changed\": {\"fields\": [\"blog\"]}}]',6,8),(7,'2019-06-12 00:54:24.242170','4','egon',2,'[{\"changed\": {\"fields\": [\"blog\"]}}]',6,8),(8,'2019-06-12 00:59:35.084678','1','Markdown',1,'[{\"added\": {}}]',11,8),(9,'2019-06-12 00:59:37.439878','1','Markdown温故知新(4)：更多扩展语法及HTML',1,'[{\"added\": {}}]',7,8),(10,'2019-06-12 01:00:47.050861','2','前端',1,'[{\"added\": {}}]',11,8),(11,'2019-06-12 01:00:48.350139','2','vue安装遇到的5个报错小结',1,'[{\"added\": {}}]',7,8),(12,'2019-06-12 01:01:32.760633','3','egon的前端',1,'[{\"added\": {}}]',11,8),(13,'2019-06-12 01:01:34.794070','3','js堆,栈与队列的区别',1,'[{\"added\": {}}]',7,8),(14,'2019-06-12 02:39:05.412053','1','markdown',1,'[{\"added\": {}}]',9,8),(15,'2019-06-12 02:40:07.169965','2','vue',1,'[{\"added\": {}}]',9,8),(16,'2019-06-12 02:40:15.464122','3','前端',1,'[{\"added\": {}}]',9,8),(17,'2019-06-12 02:40:28.127953','4','js',1,'[{\"added\": {}}]',9,8),(18,'2019-06-12 02:41:51.166785','5','前端',1,'[{\"added\": {}}]',9,8),(19,'2019-06-12 02:50:30.441695','1','Markdown温故知新(4)：更多扩展语法及HTML---markdown',1,'[{\"added\": {}}]',12,8),(20,'2019-06-12 02:50:42.648789','2','vue安装遇到的5个报错小结---vue',1,'[{\"added\": {}}]',12,8),(21,'2019-06-12 02:50:51.201264','3','vue安装遇到的5个报错小结---前端',1,'[{\"added\": {}}]',12,8),(22,'2019-06-12 02:50:55.324785','4','js堆,栈与队列的区别---js',1,'[{\"added\": {}}]',12,8),(23,'2019-06-12 02:50:59.115190','5','js堆,栈与队列的区别---前端',1,'[{\"added\": {}}]',12,8),(24,'2019-06-12 13:40:46.898193','4','覃东宇的个人博客',1,'[{\"added\": {}}]',8,8),(25,'2019-06-12 13:40:49.143736','9','qdyy',2,'[{\"changed\": {\"fields\": [\"blog\"]}}]',6,8),(26,'2019-06-12 13:41:43.997035','4','数据库',1,'[{\"added\": {}}]',11,8),(27,'2019-06-12 13:41:45.356892','4','redis原理及集群主从配置',1,'[{\"added\": {}}]',7,8),(28,'2019-06-12 13:42:29.457565','5','Web前端',1,'[{\"added\": {}}]',11,8),(29,'2019-06-12 13:42:30.638672','5','一套简单的web即时通讯——第三版',1,'[{\"added\": {}}]',7,8),(30,'2019-06-12 13:43:36.913155','6','Docker',1,'[{\"added\": {}}]',11,8),(31,'2019-06-12 13:43:37.961104','6','Docker 入门及安装[Docker 系列-1]',1,'[{\"added\": {}}]',7,8),(32,'2019-06-12 13:45:03.727895','6','Web',1,'[{\"added\": {}}]',9,8),(33,'2019-06-12 13:45:15.298080','7','mysql',1,'[{\"added\": {}}]',9,8),(34,'2019-06-12 13:45:22.608133','8','docker',1,'[{\"added\": {}}]',9,8),(35,'2019-06-12 15:04:37.209866','6','Docker 入门及安装[Docker 系列-1]---docker',1,'[{\"added\": {}}]',12,8),(36,'2019-06-12 15:04:41.793347','7','一套简单的web即时通讯——第三版---Web',1,'[{\"added\": {}}]',12,8),(37,'2019-06-12 15:04:47.542418','8','redis原理及集群主从配置---mysql',1,'[{\"added\": {}}]',12,8),(38,'2019-06-13 12:07:52.951795','6','Docker 入门及安装[Docker 系列-1]',2,'[{\"changed\": {\"fields\": [\"content\"]}}]',7,8),(39,'2019-06-13 12:14:42.867963','6','Docker 入门及安装[Docker 系列-1]',2,'[]',7,8),(40,'2019-06-13 12:15:44.365041','6','Docker 入门及安装[Docker 系列-1]',2,'[{\"changed\": {\"fields\": [\"content\"]}}]',7,8),(41,'2019-06-13 12:17:48.550640','6','Docker 入门及安装[Docker 系列-1]',2,'[{\"changed\": {\"fields\": [\"content\"]}}]',7,8),(42,'2019-06-13 12:19:13.683728','6','Docker 入门及安装[Docker 系列-1]',2,'[{\"changed\": {\"fields\": [\"content\"]}}]',7,8),(43,'2019-06-13 12:23:09.451364','5','一套简单的web即时通讯——第三版',2,'[{\"changed\": {\"fields\": [\"content\"]}}]',7,8),(44,'2019-06-13 12:24:16.430013','4','redis原理及集群主从配置',2,'[{\"changed\": {\"fields\": [\"content\"]}}]',7,8),(45,'2019-06-13 12:27:47.276116','7','经验分享',1,'[{\"added\": {}}]',11,8),(46,'2019-06-13 12:27:48.802287','7','1. 路过面了个试就拿到2个offer。是运气吗？',1,'[{\"added\": {}}]',7,8),(47,'2019-06-13 12:30:24.279432','7','1. 路过面了个试就拿到2个offer。是运气吗？',2,'[{\"changed\": {\"fields\": [\"content\"]}}]',7,8),(48,'2019-06-13 12:30:30.042956','5','一套简单的web即时通讯——第三版',2,'[{\"changed\": {\"fields\": [\"content\"]}}]',7,8),(49,'2019-06-13 12:30:35.216669','4','redis原理及集群主从配置',2,'[{\"changed\": {\"fields\": [\"content\"]}}]',7,8),(50,'2019-06-16 10:25:32.992849','8','Python',1,'[{\"added\": {}}]',11,8),(51,'2019-06-16 10:26:02.699818','15','Python基础数据类型',2,'[{\"changed\": {\"fields\": [\"desc\", \"content\", \"category\"]}}]',7,8),(52,'2019-06-16 10:26:09.333013','14','Python编码问题',2,'[{\"changed\": {\"fields\": [\"desc\", \"content\", \"category\"]}}]',7,8),(53,'2019-06-16 10:26:28.614013','9','Python开发',1,'[{\"added\": {}}]',9,8),(54,'2019-06-16 10:26:41.158859','10','计算机知识',1,'[{\"added\": {}}]',9,8),(55,'2019-06-16 10:26:55.251252','9','计算机基础---计算机知识',1,'[{\"added\": {}}]',12,8),(56,'2019-06-16 10:27:01.665599','10','Python编码问题---Python开发',1,'[{\"added\": {}}]',12,8),(57,'2019-06-16 10:27:10.016834','11','Python基础数据类型---Python开发',1,'[{\"added\": {}}]',12,8),(58,'2019-06-16 10:27:17.363641','12','Python中的代码缓存机制---Python开发',1,'[{\"added\": {}}]',12,8),(59,'2019-06-16 10:27:44.768286','16','计算机基础',2,'[{\"changed\": {\"fields\": [\"desc\", \"content\", \"category\"]}}]',7,8),(60,'2019-06-16 10:28:03.072789','13','大王警语--be_a_new_gentleman',2,'[{\"changed\": {\"fields\": [\"title\", \"desc\", \"category\"]}}]',7,8),(61,'2019-06-16 10:39:47.800421','9','运维数据库',1,'[{\"added\": {}}]',11,8),(62,'2019-06-16 10:39:49.213618','23','聊聊数据库~6.SQL运维中篇',2,'[{\"changed\": {\"fields\": [\"desc\", \"content\", \"category\"]}}]',7,8),(63,'2019-06-16 10:40:14.455216','10','Git',1,'[{\"added\": {}}]',11,8),(64,'2019-06-16 10:40:16.430086','22','Git 基础教程 之 --no-ff模式合并',2,'[{\"changed\": {\"fields\": [\"desc\", \"content\", \"category\"]}}]',7,8),(65,'2019-06-16 10:40:22.282058','21','Git 基础教程 之 Bug分支和Stash',2,'[{\"changed\": {\"fields\": [\"desc\", \"content\", \"category\"]}}]',7,8),(66,'2019-06-16 10:40:27.288524','20','Git 基础教程 之 添加、提交',2,'[{\"changed\": {\"fields\": [\"desc\", \"content\", \"category\"]}}]',7,8),(67,'2019-06-16 10:40:31.312210','19','Git 基础教程 之 Git 安装 (windows)',2,'[{\"changed\": {\"fields\": [\"desc\", \"content\", \"category\"]}}]',7,8),(68,'2019-06-16 10:40:38.593405','18','Git 基础教程 之 暂存区',2,'[{\"changed\": {\"fields\": [\"desc\", \"content\", \"category\"]}}]',7,8),(69,'2019-06-16 10:40:43.263726','17','Git 基础教程 之 撤销修改',2,'[{\"changed\": {\"fields\": [\"desc\", \"content\", \"category\"]}}]',7,8),(70,'2019-06-16 10:41:34.282780','11','git',1,'[{\"added\": {}}]',9,8),(71,'2019-06-16 10:41:52.116383','13','Git 基础教程 之 撤销修改---git',1,'[{\"added\": {}}]',12,8),(72,'2019-06-16 10:41:59.825981','14','Git 基础教程 之 --no-ff模式合并---git',1,'[{\"added\": {}}]',12,8),(73,'2019-06-16 10:42:07.144124','15','Git 基础教程 之 Bug分支和Stash---git',1,'[{\"added\": {}}]',12,8),(74,'2019-06-16 10:42:14.493930','16','Git 基础教程 之 添加、提交---git',1,'[{\"added\": {}}]',12,8),(75,'2019-06-16 10:42:21.792766','17','Git 基础教程 之 Git 安装 (windows)---git',1,'[{\"added\": {}}]',12,8),(76,'2019-06-16 10:42:28.221098','18','Git 基础教程 之 暂存区---git',1,'[{\"added\": {}}]',12,8),(77,'2019-06-16 10:43:01.497112','12','运维数据库',1,'[{\"added\": {}}]',9,8),(78,'2019-06-16 10:43:14.788528','19','聊聊数据库~6.SQL运维中篇---运维数据库',1,'[{\"added\": {}}]',12,8);
/*!40000 ALTER TABLE `django_admin_log` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `django_content_type`
--

DROP TABLE IF EXISTS `django_content_type`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
 SET character_set_client = utf8mb4 ;
CREATE TABLE `django_content_type` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `app_label` varchar(100) NOT NULL,
  `model` varchar(100) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `django_content_type_app_label_model_76bd3d3b_uniq` (`app_label`,`model`)
) ENGINE=InnoDB AUTO_INCREMENT=14 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `django_content_type`
--

LOCK TABLES `django_content_type` WRITE;
/*!40000 ALTER TABLE `django_content_type` DISABLE KEYS */;
INSERT INTO `django_content_type` VALUES (1,'admin','logentry'),(3,'auth','group'),(2,'auth','permission'),(7,'blog','article'),(12,'blog','article2tag'),(13,'blog','articleupdown'),(8,'blog','blog'),(11,'blog','category'),(10,'blog','comment'),(9,'blog','tag'),(6,'blog','userinfo'),(4,'contenttypes','contenttype'),(5,'sessions','session');
/*!40000 ALTER TABLE `django_content_type` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `django_migrations`
--

DROP TABLE IF EXISTS `django_migrations`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
 SET character_set_client = utf8mb4 ;
CREATE TABLE `django_migrations` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `app` varchar(255) NOT NULL,
  `name` varchar(255) NOT NULL,
  `applied` datetime(6) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=19 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `django_migrations`
--

LOCK TABLES `django_migrations` WRITE;
/*!40000 ALTER TABLE `django_migrations` DISABLE KEYS */;
INSERT INTO `django_migrations` VALUES (1,'contenttypes','0001_initial','2019-06-03 22:56:24.342499'),(2,'contenttypes','0002_remove_content_type_name','2019-06-03 22:56:24.686235'),(3,'auth','0001_initial','2019-06-03 22:56:24.983080'),(4,'auth','0002_alter_permission_name_max_length','2019-06-03 22:56:25.764278'),(5,'auth','0003_alter_user_email_max_length','2019-06-03 22:56:25.795539'),(6,'auth','0004_alter_user_username_opts','2019-06-03 22:56:25.826778'),(7,'auth','0005_alter_user_last_login_null','2019-06-03 22:56:25.858021'),(8,'auth','0006_require_contenttypes_0002','2019-06-03 22:56:25.873651'),(9,'auth','0007_alter_validators_add_error_messages','2019-06-03 22:56:25.889266'),(10,'auth','0008_alter_user_username_max_length','2019-06-03 22:56:25.904892'),(11,'auth','0009_alter_user_last_name_max_length','2019-06-03 22:56:25.920534'),(12,'auth','0010_alter_group_name_max_length','2019-06-03 22:56:25.967385'),(13,'auth','0011_update_proxy_permissions','2019-06-03 22:56:25.983009'),(14,'blog','0001_initial','2019-06-03 22:56:27.061069'),(15,'admin','0001_initial','2019-06-03 22:56:29.998366'),(16,'admin','0002_logentry_remove_auto_add','2019-06-03 22:56:30.388997'),(17,'admin','0003_logentry_add_action_flag_choices','2019-06-03 22:56:30.420205'),(18,'sessions','0001_initial','2019-06-03 22:56:30.513949');
/*!40000 ALTER TABLE `django_migrations` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `django_session`
--

DROP TABLE IF EXISTS `django_session`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
 SET character_set_client = utf8mb4 ;
CREATE TABLE `django_session` (
  `session_key` varchar(40) NOT NULL,
  `session_data` longtext NOT NULL,
  `expire_date` datetime(6) NOT NULL,
  PRIMARY KEY (`session_key`),
  KEY `django_session_expire_date_a5c62663` (`expire_date`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `django_session`
--

LOCK TABLES `django_session` WRITE;
/*!40000 ALTER TABLE `django_session` DISABLE KEYS */;
INSERT INTO `django_session` VALUES ('6wl15ocg0rwow3zzbe5d4gkp7yenwkmi','MzViYWI0ZjY1MGQ3YmQ2ZDFjNmY2OGY1NDk3NGIyODMwNDYyMDFhNTp7ImN1cl9jaGVja19jb2RlIjoiMTIzIn0=','2019-06-29 13:40:08.903514'),('722zmk3s2cpi6l9ddq1kf1qqahkw7q6w','NTkzOTg5ZTY3MmFhZjU5MzU3NDJiYjhkZjUyNWM3NWIwMDkyZjZiMDp7Imd0X3NlcnZlcl9zdGF0dXMiOjEsInVzZXJfaWQiOiJnZWV0ZXN0IiwiY3VyX2NoZWNrX2NvZGUiOiIxMjMiLCJfYXV0aF91c2VyX2lkIjoiOSIsIl9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIiwiX2F1dGhfdXNlcl9oYXNoIjoiNThmYWRkMGU3MDlhMmUzYmU2NzUwZTk1ZjdiYjUzMTgyNzJiN2NhZCJ9','2019-06-26 22:00:31.914560'),('8ummmqzkv6icccazp2red24vus50hanp','Mjk1MmM4MDJjYjhkZTcyOGJjNDgyZjkxZTg1ZGI1ZjUwYjkwY2U3NDp7ImN1cl9jaGVja19jb2RlIjoiMTIzIiwiZ3Rfc2VydmVyX3N0YXR1cyI6MSwidXNlcl9pZCI6ImdlZXRlc3QifQ==','2019-06-30 10:29:08.792233'),('arqfq0jywyzq4scyopl2y7d3myuzlii2','MjczYjc2MzA5YmEzMDY3ODBhN2E1ZDEyZGEwNDZmZGFmMzUxZmFkODp7ImN1cl9jaGVja19jb2RlIjoiQzdBTUUifQ==','2019-06-26 19:06:49.331468'),('ax4sw2ls6w1pch7p4gzypxys1qdrb5m3','MzViYWI0ZjY1MGQ3YmQ2ZDFjNmY2OGY1NDk3NGIyODMwNDYyMDFhNTp7ImN1cl9jaGVja19jb2RlIjoiMTIzIn0=','2019-06-30 09:15:37.587000'),('drmwejx6fqe1lxtv9jovwct5sqo9vfoh','MzViYWI0ZjY1MGQ3YmQ2ZDFjNmY2OGY1NDk3NGIyODMwNDYyMDFhNTp7ImN1cl9jaGVja19jb2RlIjoiMTIzIn0=','2019-06-28 15:48:05.712959'),('j89r1rgcehwm0p7iv2vxlj7aylyvw64y','Mjk1MmM4MDJjYjhkZTcyOGJjNDgyZjkxZTg1ZGI1ZjUwYjkwY2U3NDp7ImN1cl9jaGVja19jb2RlIjoiMTIzIiwiZ3Rfc2VydmVyX3N0YXR1cyI6MSwidXNlcl9pZCI6ImdlZXRlc3QifQ==','2019-06-28 22:47:24.014880'),('jjr4fqyschsle101g9ibbc7h39p4y2cy','MzViYWI0ZjY1MGQ3YmQ2ZDFjNmY2OGY1NDk3NGIyODMwNDYyMDFhNTp7ImN1cl9jaGVja19jb2RlIjoiMTIzIn0=','2019-06-26 21:49:01.409668'),('k69t3vjk1yr3rkkvgt4yv4xrm3oxufch','ZWJjYjYzNGQ1NWU2ZWVjNzkyYmJhYTEyY2Y3MDljNTQzYTBiYTBkNDp7ImN1cl9jaGVja19jb2RlIjoiT0VTYnMifQ==','2019-06-21 15:24:28.048852'),('lelgrrk63wnmgbgbhssiivjoi3hxzwr0','MzViYWI0ZjY1MGQ3YmQ2ZDFjNmY2OGY1NDk3NGIyODMwNDYyMDFhNTp7ImN1cl9jaGVja19jb2RlIjoiMTIzIn0=','2019-06-26 23:06:48.038612'),('n3lcgq0ou7mt3lnwfhrnh60icql0fqfn','MzViYWI0ZjY1MGQ3YmQ2ZDFjNmY2OGY1NDk3NGIyODMwNDYyMDFhNTp7ImN1cl9jaGVja19jb2RlIjoiMTIzIn0=','2019-06-27 22:32:33.654276'),('pvv2qorhq2l1dl7e0snig4pnvf5jg878','OWYzOTRkOGYzNjhhNDYzYWIwZmFlOWRmZmU5MDQzYTU0NWMzMDFlNTp7ImN1cl9jaGVja19jb2RlIjoiMTIzIiwiZ3Rfc2VydmVyX3N0YXR1cyI6MSwidXNlcl9pZCI6ImdlZXRlc3QiLCJfYXV0aF91c2VyX2lkIjoiMTciLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaGFzaCI6IjZmYWM0ZTZiYTQ5OGVmNjMwM2M0OTgwMzc2MjVmM2RmMDBmNThkYzIifQ==','2019-06-30 10:43:33.887631'),('r9o6lv6kmqkzldgmimjw6yua19qrvwwr','YTcxOTJhMjRjM2UxZGQzNmEzYmI5MWZhZWQ4ZDFmNjJjMjQ5YTdhMTp7ImN1cl9jaGVja19jb2RlIjoiWTRVcFMiLCJndF9zZXJ2ZXJfc3RhdHVzIjoxLCJ1c2VyX2lkIjoiZ2VldGVzdCJ9','2019-06-26 00:11:33.497491'),('uloif8t228zcjx4k4fp51bfk79aljuhp','ODNlOWFhNTJlMTA0MDlkNThlNGQ2NmMyM2JkNzc5NDQ2MWU4OGNjYjp7Imd0X3NlcnZlcl9zdGF0dXMiOjEsInVzZXJfaWQiOiJnZWV0ZXN0In0=','2019-06-28 15:48:05.820915'),('x6x4llctezsfz0lt3bnl82tf7kgnff8l','MzViYWI0ZjY1MGQ3YmQ2ZDFjNmY2OGY1NDk3NGIyODMwNDYyMDFhNTp7ImN1cl9jaGVja19jb2RlIjoiMTIzIn0=','2019-06-29 21:38:16.635767');
/*!40000 ALTER TABLE `django_session` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2019-06-16 11:58:34
